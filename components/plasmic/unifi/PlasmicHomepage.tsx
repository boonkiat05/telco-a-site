/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vEU7LntD2rfdBHtDX5FyyK
// Component: 7EsqccNyFGP0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: -BmQBNQ8nLWc/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Mybottom from "../../Mybottom"; // plasmic-import: tfiywmxbHZxm/component
import Orange from "../../Orange"; // plasmic-import: 065BO1JJJI1f/component
import Divider from "../../Divider"; // plasmic-import: Yhtrs6aV_zFG/component
import Banner from "../../Banner"; // plasmic-import: h2C6ls3UH7i8/component
import Section from "../../Section"; // plasmic-import: QYyTgNYr5lMz/component
import PriceCard from "../../PriceCard"; // plasmic-import: OqNqhK5S7yUz/component
import SignUpPrompt from "../../SignUpPrompt"; // plasmic-import: kt8U1LS5Krmj/component
import Combobox from "../../Combobox"; // plasmic-import: a1dxSBJ94M_7/component
import MenuItem from "../../MenuItem"; // plasmic-import: tn0m7BktVF7t/component
import TextInput from "../../TextInput"; // plasmic-import: mfHNE4bO_GSv/component
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import TextField from "../../TextField"; // plasmic-import: mQkrtvDi894X/component
import Select from "../../Select"; // plasmic-import: VCdGH-2ew8bj/component
import MenuSection from "../../MenuSection"; // plasmic-import: eRL10N7Swha-/component
import FooterSection from "../../FooterSection"; // plasmic-import: 1j-6x005Ca9B/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 7EsqccNyFGP0/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: RV9gb3oAKBcE/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ft0TW_03C8R0/icon
import WhatsappIconLogoSvgrepoComSvgIcon from "./icons/PlasmicIcon__WhatsappIconLogoSvgrepoComSvg"; // plasmic-import: usKkWV7dA3im/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: gEW2vNY3gNvR/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  accordion3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "slot5",
  "slot6",
  "slot7",
  "slot8",
  "slot9",
  "slot10",
  "accordion3"
);

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"a"> & Partial<LinkProps>;
  navbar?: Flex__<typeof Navbar>;
  sliderCarousel4?: Flex__<typeof SliderWrapper>;
  mybottom?: Flex__<typeof Mybottom>;
  banner?: Flex__<typeof Banner>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  pricingSection?: Flex__<typeof Section>;
  headerHeroSection2?: Flex__<"div">;
  columns?: Flex__<"div">;
  signUpPrompt?: Flex__<typeof SignUpPrompt>;
  combobox?: Flex__<typeof Combobox>;
  combobox2?: Flex__<typeof Combobox>;
  textInput6?: Flex__<typeof TextInput>;
  textInputt?: Flex__<typeof TextInput>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  textInput5?: Flex__<typeof TextInput>;
  section?: Flex__<"section">;
  foreground3?: Flex__<"div">;
  h2?: Flex__<"h2">;
  accordion2?: Flex__<typeof AntdAccordion>;
  accordion5?: Flex__<typeof AntdAccordion>;
  accordion6?: Flex__<typeof AntdAccordion>;
  accordion7?: Flex__<typeof AntdAccordion>;
  textField?: Flex__<typeof TextField>;
  select?: Flex__<typeof Select>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "item1"
      },
      {
        path: "textField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "accordion5.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion6.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion7.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion2.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 2,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInputt.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textInputt.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "phoneNumber",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput2.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "adress",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput3.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "combobox.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "combobox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "combobox2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "combobox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "_package",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.combobox.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "homePackage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.combobox2.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "postcode",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput4.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "state",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput5.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "installDate",
        type: "private",
        variableType: "dateRangeStrings",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput7.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "icFront",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.upload.files;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "icBack",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.upload2.files;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "photoUrl1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.upload.files;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "photoUrl2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.upload2.files;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ic",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput6.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "sliderCarousel4.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel4",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <PlasmicLink__
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            }
          )}
          component={Link}
          platform={"nextjs"}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar, {
              [sty.navbarglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
          />

          {(() => {
            const child$Props = {
              arrows: false,
              autoplay: false,
              autoplaySpeed: 0,
              beforeChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel4", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              centerMode: true,
              className: classNames("__wab_instance", sty.sliderCarousel4, {
                [sty.sliderCarousel4global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              }),
              cssEase: "linear",
              dots: true,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel4",
                "currentSlide"
              ]),
              ref: ref => {
                $refs["sliderCarousel4"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel4__slider"],
              speed: 500
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel4.currentSlide"
                }
              ],
              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel4"}
                data-plasmic-override={overrides.sliderCarousel4}
                {...child$Props}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ok84I)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__lPnHy, {
                      [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__lPnHye9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/unifi/images/q3BbOnlyFree3MonthsWebBanner620X400Jan2025Png.png",
                      fullWidth: 620,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__az9KE
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"FREE HOME INTERNET FOR 3 MONTH"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6IK6
                    )}
                  >
                    {"Save more than RM 500 when you sign up with Unifi Home"}
                  </div>
                  <Mybottom
                    data-plasmic-name={"mybottom"}
                    data-plasmic-override={overrides.mybottom}
                    className={classNames("__wab_instance", sty.mybottom)}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vrxw9)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__lk5To, {
                      [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__lk5Toe9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/unifi/images/landingPageBannerAward620X400PxPng.png",
                      fullWidth: 620,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dFm6T
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Upgrade For Unifi Mobile"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e3E7V
                    )}
                  >
                    {
                      "Get FREE 5G Smartphone and steam on-the-go with Unifi Mobile's Best Expeience"
                    }
                  </div>
                  <Orange
                    className={classNames("__wab_instance", sty.orange__gkpLb)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ie8Gs
                        )}
                      >
                        {"Next"}
                      </div>
                    }
                  />
                </div>
              </SliderWrapper>
            );
          })()}
          <div className={classNames(projectcss.all, sty.freeBox__wLyo)}>
            <Divider
              className={classNames("__wab_instance", sty.divider__fgvV8)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__lhmFm)}>
              <div className={classNames(projectcss.all, sty.freeBox__q6Xrr)}>
                <div className={classNames(projectcss.all, sty.freeBox__rrzMj)}>
                  <Banner
                    data-plasmic-name={"banner"}
                    data-plasmic-override={overrides.banner}
                    className={classNames("__wab_instance", sty.banner)}
                    image={{
                      src: "/plasmic/unifi/images/abstractGradienOrangeSunkistSunsetGradientMeshBackgroundVectorJpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1006,
                      aspectRatio: undefined
                    }}
                    left={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__j4A2H
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__wf6Fa)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "320.17%"
                                : "100%"
                            }
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "292px"
                                : "auto"
                            }
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/bannerHomefibrePng.png",
                              fullWidth: 534,
                              fullHeight: 349,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__erErU
                          )}
                        />

                        {(() => {
                          const child$Props = {
                            arrows: false,
                            autoplay: false,
                            autoplaySpeed: 0,
                            beforeChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "currentSlide",
                                ["sliderCarousel", "currentSlide"],
                                SliderWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            centerMode: true,
                            className: classNames(
                              "__wab_instance",
                              sty.sliderCarousel
                            ),
                            cssEase: "linear",
                            dots: true,
                            initialSlide: generateStateValueProp($state, [
                              "sliderCarousel",
                              "currentSlide"
                            ]),
                            pauseOnDotsHover: true,
                            pauseOnFocus: true,
                            pauseOnHover: false,
                            ref: ref => {
                              $refs["sliderCarousel"] = ref;
                            },
                            sliderScopeClassName: sty["sliderCarousel__slider"],
                            speed: 1000,
                            swipe: false,
                            touchMove: true,
                            touchThreshold: 5
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "currentSlide",
                                plasmicStateName: "sliderCarousel.currentSlide"
                              }
                            ],
                            [],
                            SliderWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <SliderWrapper
                              data-plasmic-name={"sliderCarousel"}
                              data-plasmic-override={overrides.sliderCarousel}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zfvab
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ybNej
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__gityG)}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "200px"
                                        : "auto"
                                    }
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "200px"
                                        : "606px"
                                    }
                                    src={{
                                      src: "/plasmic/unifi/images/q3BbOnlyFree3MonthsWebBanner620X400Jan2025Png.png",
                                      fullWidth: 620,
                                      fullHeight: 400,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hFxvJ
                                    )}
                                  >
                                    <h1
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h1,
                                        projectcss.__wab_text,
                                        sty.h1__zOczX
                                      )}
                                    >
                                      {"FREE HOME INTERNET FOR 3 MONTH"}
                                    </h1>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___8IWuz
                                      )}
                                    >
                                      {
                                        "Save more than RM 500 when you sign up with Unifi Home"
                                      }
                                    </div>
                                    <Orange
                                      className={classNames(
                                        "__wab_instance",
                                        sty.orange__hrRd
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__av5Pf
                                          )}
                                        >
                                          {"Next"}
                                        </div>
                                      }
                                      openLinkInNewTab={true}
                                    />
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ekaUc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__k8Cg4
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__lMtJ)}
                                    displayHeight={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "200px"
                                        : "auto"
                                    }
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "200px"
                                        : "auto"
                                    }
                                    src={{
                                      src: "/plasmic/unifi/images/landingPageBannerAward620X400PxPng.png",
                                      fullWidth: 620,
                                      fullHeight: 400,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jrCnq
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__aVbOo
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__j8Wy4
                                        )}
                                      >
                                        {"Upgrade for unifi mobile"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xYzFe
                                        )}
                                      >
                                        {
                                          "Get FREE 5G Smartphone and stream on-the-go with Unifi Mobile's Best Experience"
                                        }
                                      </div>
                                      <Orange
                                        className={classNames(
                                          "__wab_instance",
                                          sty.orange__oZu5Z
                                        )}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__htHkd
                                            )}
                                          >
                                            {"Next"}
                                          </div>
                                        }
                                      />
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </SliderWrapper>
                          );
                        })()}
                      </React.Fragment>
                    }
                  />
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fNgi)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1___4KrmB
              )}
            >
              {"CUSTOMISE YOUR UNIFI HOME BROADBAND PLAN"}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gMhyi,
                {
                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__gMhyiE9Dzn]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants2",
                      "unnamedVariant"
                    )
                }
              )}
            >
              {
                "Create a broadband internet plan that fits your daily need. Enjoy lighting fast- fibre broadband with seamless connectivity for streaming, gaming, and working from home. Choose from the best broadband plans in Malaysia for reliable,high-speed broadband across all your devices"
              }
            </div>
            <Orange
              className={classNames("__wab_instance", sty.orange__fg78N, {
                [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__fg78NE9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
              end={
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg__p6NUw)}
                  role={"img"}
                />
              }
              label={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__patgm,
                      {
                        [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__patgme9Dzn]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants2",
                            "unnamedVariant"
                          )
                      }
                    )}
                  >
                    {"Whatsapp us"}
                  </div>
                  <WhatsappIconLogoSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__d0JaO, {
                      [sty.svgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__d0JaOe9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    role={"img"}
                  />
                </React.Fragment>
              }
              linkTo={'https://wa.me/60107801215?text="hello"'}
              openLinkInNewTab={true}
            />
          </div>
          <Divider
            className={classNames("__wab_instance", sty.divider__seaDm)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b1Rk,
              {
                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__b1RkE9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              }
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {
                  "Not sure what speeds you need? Find the right Unifi Home Plan for your home."
                }
              </span>
            </React.Fragment>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___5Qqjz, {
              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___5Qqjze9Dzn]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___1EsG, {
                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___1EsGe9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xX4I,
                  {
                    [sty.linkglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__xX4IE9Dzn]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  }
                )}
                component={Link}
                href={`/new-page`}
                platform={"nextjs"}
              >
                {"CLICK HERE"}
              </PlasmicLink__>
              <ChevronRightIcon
                className={classNames(projectcss.all, sty.svg___0Tx1L)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage2"] = true
                    ? (() => {
                        const actionArgs = { destination: `/new-page` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage2"] != null &&
                    typeof $steps["goToHomepage2"] === "object" &&
                    typeof $steps["goToHomepage2"].then === "function"
                  ) {
                    $steps["goToHomepage2"] = await $steps["goToHomepage2"];
                  }
                }}
                role={"img"}
              />
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__zresi, {
              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__zresiE9Dzn]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
          >
            <Section
              data-plasmic-name={"pricingSection"}
              data-plasmic-override={overrides.pricingSection}
              background={"dark"}
              className={classNames("__wab_instance", sty.pricingSection, {
                [sty.pricingSectionglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__pe9Qq, {
                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__pe9Qqe9Dzn]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants2",
                      "unnamedVariant"
                    )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__pBzN0, {
                    [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__pBzN0E9Dzn]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                  id={"Price"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yx5Sy, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__yx5SyE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__spdoN,
                        {
                          [sty.priceCardglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__spdoNe9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uHyg
                            )}
                          >
                            {"99"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aEoBo
                            )}
                          >
                            {"89"}
                          </div>
                        </React.Fragment>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fu12X
                          )}
                        >
                          {"100MBPS"}
                        </div>
                      }
                      slot={renderPlasmicSlot({
                        defaultContents: (
                          <React.Fragment>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a7OdJ
                              )}
                            >
                              {""}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__d24F0
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"What include:"}
                                </span>
                                <React.Fragment>
                                  {
                                    "\n100Mbps / 50 Mbps\nWifi 6 combo box\n24 hours service guarentee\n\n\n"
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            </div>
                          </React.Fragment>
                        ),
                        value: args.slot5,
                        className: classNames(sty.slotTargetSlot5)
                      })}
                      slot2={
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange__s8XwD,
                            {
                              [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__s8XwDe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__svNmJ,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__svNmJe9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={
                            "https://wa.me/60107801215?text=Hi, I am interest to purchase 100MBPS plan."
                          }
                          openLinkInNewTab={true}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eMyXg
                        )}
                      >
                        {"100MBPS/300MBPS"}
                      </div>
                    </PriceCard>
                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__lzGkK
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yjcom
                            )}
                          >
                            {"18"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hGAgR
                            )}
                          >
                            {"8"}
                          </div>
                        </React.Fragment>
                      }
                      label={"100MBPS"}
                    />

                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__b6L53,
                        {
                          [sty.priceCardglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__b6L53E9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ivcol
                            )}
                          >
                            {"139"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ueF58
                            )}
                          >
                            {"129"}
                          </div>
                        </React.Fragment>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sPvf8
                          )}
                        >
                          {"300MBPS"}
                        </div>
                      }
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5Llw2,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___5Llw2E9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {renderPlasmicSlot({
                            defaultContents: (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tQrs0
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"What include:"}
                                  </span>
                                  <React.Fragment>
                                    {
                                      "\n300Mpbs / 50 Mbps\nWifi 6 combo box\n24 hours service guarentee\n"
                                    }
                                  </React.Fragment>
                                </React.Fragment>
                              </div>
                            ),
                            value: args.slot6,
                            className: classNames(sty.slotTargetSlot6)
                          })}
                        </div>
                      }
                      slot2={
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange__q5FF6,
                            {
                              [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__q5FF6E9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ao90K,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ao90KE9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={
                            "https://wa.me/60107801215?text=Hi, I am interest to purchase 300MBPS plan."
                          }
                          openLinkInNewTab={true}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yh2Ys,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__yh2YsE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"What include:\u00a0"}
                          </span>
                          <React.Fragment>
                            {
                              "\n300Mbps / 50 Mbps\nWifi 6 combo box\n24 hours service guarentee\n\n\n"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </PriceCard>
                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__gy47D
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rvFbH
                            )}
                          >
                            {"159"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5HbsG
                            )}
                          >
                            {"149"}
                          </div>
                        </React.Fragment>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lTfJd
                          )}
                        >
                          {"500MBPS"}
                        </div>
                      }
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7DtDi,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___7DtDie9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"What include:"}
                            </span>
                            <React.Fragment>
                              {
                                "\n500Mbps / 100 Mbps\nWifi 6 combo box\n24 hours guarentee\n"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      slot2={renderPlasmicSlot({
                        defaultContents: (
                          <Orange
                            className={classNames(
                              "__wab_instance",
                              sty.orange__gpuZ9
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nu3L4
                                )}
                              >
                                {"Select"}
                              </div>
                            }
                            linkTo={
                              "https://wa.me/60107801215?text=Hi, I am interest to purchase 500MBPS plan."
                            }
                            openLinkInNewTab={true}
                          />
                        ),

                        value: args.slot7
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aeMkI
                        )}
                      >
                        {"100MBPS/300MBPS"}
                      </div>
                    </PriceCard>
                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__tiqWd
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dh3Fc
                            )}
                          >
                            {"259"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ki9BX
                            )}
                          >
                            {"249"}
                          </div>
                        </React.Fragment>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hSJyr
                          )}
                        >
                          {"1GBPS"}
                        </div>
                      }
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___94QPw,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___94QPwE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"What include:"}
                            </span>
                            <React.Fragment>
                              {
                                "\n1Gbps / 500 Mbps\nWifi 7 combo box\n12 business hour service restoration\npremium service\n"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      slot2={
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange___07SeE,
                            {
                              [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___07SeEe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ohY,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ohYE9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={
                            "https://wa.me/60107801215?text=Hi, I am interest to purchase 1GBPS plan."
                          }
                          openLinkInNewTab={true}
                        />
                      }
                    />

                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__tshpL
                      )}
                      dollars={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cIq6W
                          )}
                        >
                          {"319"}
                        </div>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xvXgi
                          )}
                        >
                          {"2GBPS"}
                        </div>
                      }
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___20Ipo
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"What include:"}
                            </span>
                            <React.Fragment>
                              {
                                "\n2Gbps / 1 Gbps\nWifi 7 combo box\n12 business hour service restoration\npremium service\n"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      slot2={
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange__pNbDo,
                            {
                              [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__pNbDoE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xEexz,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__xEexzE9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={
                            "https://wa.me/60107801215?text=Hi, I am interest to purchase 2GBPS plan."
                          }
                          openLinkInNewTab={true}
                        />
                      }
                    />

                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__nsGwY
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ab10G
                            )}
                          >
                            {"18"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xGrVp
                            )}
                          >
                            {"8"}
                          </div>
                        </React.Fragment>
                      }
                      label={"100MBPS"}
                    />

                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__xMrxX
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8VqPs
                            )}
                          >
                            {"18"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yKbmC
                            )}
                          >
                            {"8"}
                          </div>
                        </React.Fragment>
                      }
                      label={"100MBPS"}
                    />

                    <PriceCard
                      borders={["flatRight"]}
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__s1ZL
                      )}
                      dollars={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4FEPb
                            )}
                          >
                            {"18"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kSyU
                            )}
                          >
                            {"8"}
                          </div>
                        </React.Fragment>
                      }
                      label={"100MBPS"}
                      slot2={
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange__ixJp
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___35YvP
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={
                            "https://wa.me/60107801215?text=Hi, I am interest to purchase 100MBPS plan."
                          }
                          openLinkInNewTab={true}
                        />
                      }
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__r66Xo)}>
                  <PriceCard
                    borders={["flatRight"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__jDtYf,
                      {
                        [sty.priceCardglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__jDtYfe9Dzn]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants2",
                            "unnamedVariant"
                          )
                      }
                    )}
                    dollars={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__auef8
                          )}
                        >
                          {"99"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Q4WX
                          )}
                        >
                          {"89"}
                        </div>
                      </React.Fragment>
                    }
                    label={"100MBPS"}
                    slot={renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__er1Tj
                            )}
                          >
                            {""}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8DjEj
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"What include:"}
                              </span>
                              <React.Fragment>
                                {
                                  "\n100Mbps / 50 Mbps\nWifi 6 combo box\n24 hours service guarentee\n\n\n"
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                        </React.Fragment>
                      ),
                      value: args.slot8,
                      className: classNames(sty.slotTargetSlot8)
                    })}
                    slot2={
                      <Orange
                        className={classNames(
                          "__wab_instance",
                          sty.orange__tgYTr,
                          {
                            [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__tgYTrE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ny4Hk,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ny4Hke9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Select"}
                          </div>
                        }
                        linkTo={""}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToLeads"] = true
                            ? (() => {
                                const actionArgs = { destination: "#leads" };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToLeads"] != null &&
                            typeof $steps["goToLeads"] === "object" &&
                            typeof $steps["goToLeads"].then === "function"
                          ) {
                            $steps["goToLeads"] = await $steps["goToLeads"];
                          }
                        }}
                        openLinkInNewTab={true}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xz8X
                      )}
                    >
                      {"100MBPS/300MBPS"}
                    </div>
                  </PriceCard>
                  <PriceCard
                    borders={["flatRight"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__h4Tmz,
                      {
                        [sty.priceCardglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__h4Tmze9Dzn]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants2",
                            "unnamedVariant"
                          )
                      }
                    )}
                    dollars={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uEs
                          )}
                        >
                          {"139"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5HDuQ
                          )}
                        >
                          {"129"}
                        </div>
                      </React.Fragment>
                    }
                    label={"300MBPS"}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o0MFy,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__o0MFye9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {renderPlasmicSlot({
                          defaultContents: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mwaBt
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"What include:"}
                                </span>
                                <React.Fragment>
                                  {
                                    "\n300Mpbs / 50 Mbps\nWifi 6 combo box\n24 hours service guarentee\n"
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            </div>
                          ),
                          value: args.slot9,
                          className: classNames(sty.slotTargetSlot9)
                        })}
                      </div>
                    }
                    slot2={
                      <React.Fragment>
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange__yLoPt,
                            {
                              [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__yLoPtE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cOyKr,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__cOyKrE9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={""}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToLeads"] = true
                              ? (() => {
                                  const actionArgs = { destination: "#leads" };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToLeads"] != null &&
                              typeof $steps["goToLeads"] === "object" &&
                              typeof $steps["goToLeads"].then === "function"
                            ) {
                              $steps["goToLeads"] = await $steps["goToLeads"];
                            }
                          }}
                          openLinkInNewTab={true}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jlvOf
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000", fontWeight: 700 }}
                            >
                              {"What include:"}
                            </span>
                            <React.Fragment>
                              {
                                "\u00a0\u00a0\n300Mbps / 50 Mbps\nWifi 6 combo box\n24 hours service guarentee\n\n\n\n\n\n\n"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4VkXp,
                        {
                          [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___4VkXpE9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"What include:\u00a0"}
                        </span>
                        <React.Fragment>
                          {
                            "\n300Mbps / 50 Mbps\nWifi 6 combo box\n24 hours service guarentee\n\n\n"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </PriceCard>
                  <PriceCard
                    borders={["flatRight"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__sCik9
                    )}
                    dollars={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vClFc
                          )}
                        >
                          {"159"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__najy6
                          )}
                        >
                          {"149"}
                        </div>
                      </React.Fragment>
                    }
                    label={"500MBPS"}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k3Kv,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__k3KvE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"What include:"}
                          </span>
                          <React.Fragment>
                            {
                              "\n500Mbps / 100 Mbps\nWifi 6 combo box\n24 hours guarentee\n"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    }
                    slot2={renderPlasmicSlot({
                      defaultContents: (
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange__m05B
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__f2YZ5
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={""}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToLeads"] = true
                              ? (() => {
                                  const actionArgs = { destination: "#leads" };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToLeads"] != null &&
                              typeof $steps["goToLeads"] === "object" &&
                              typeof $steps["goToLeads"].then === "function"
                            ) {
                              $steps["goToLeads"] = await $steps["goToLeads"];
                            }
                          }}
                          openLinkInNewTab={true}
                        />
                      ),

                      value: args.slot10
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xVodC
                      )}
                    >
                      {"100MBPS/300MBPS"}
                    </div>
                  </PriceCard>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rrotQ)}>
                  <PriceCard
                    borders={["flatRight"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__qeBdf
                    )}
                    dollars={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rWq6B
                          )}
                        >
                          {"259"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__apU9
                          )}
                        >
                          {"249"}
                        </div>
                      </React.Fragment>
                    }
                    label={"1GBPS"}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4BdYs,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___4BdYsE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"What include:"}
                          </span>
                          <React.Fragment>
                            {
                              "\n1Gbps / 500 Mbps\nWifi 7 combo box\n12 business hour service restoration\npremium service\n"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    }
                    slot2={
                      <Orange
                        className={classNames(
                          "__wab_instance",
                          sty.orange__fFJ9,
                          {
                            [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__fFJ9E9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mQy3P,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__mQy3Pe9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Select"}
                          </div>
                        }
                        linkTo={""}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = { destination: "#leads" };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        openLinkInNewTab={true}
                      />
                    }
                  />

                  <PriceCard
                    borders={["flatRight"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__fa8BT
                    )}
                    dollars={"319"}
                    label={"2GBPS"}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jlexc
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"What include:"}
                          </span>
                          <React.Fragment>
                            {
                              "\n2Gbps / 1 Gbps\nWifi 7 combo box\n12 business hour service restoration\npremium service\n"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    }
                    slot2={
                      <Orange
                        className={classNames(
                          "__wab_instance",
                          sty.orange__eBf6P,
                          {
                            [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__eBf6PE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__axOhv,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__axOhvE9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Select"}
                          </div>
                        }
                        linkTo={""}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToLeads"] = true
                            ? (() => {
                                const actionArgs = { destination: "#leads" };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToLeads"] != null &&
                            typeof $steps["goToLeads"] === "object" &&
                            typeof $steps["goToLeads"].then === "function"
                          ) {
                            $steps["goToLeads"] = await $steps["goToLeads"];
                          }
                        }}
                        openLinkInNewTab={true}
                      />
                    }
                  />
                </div>
                <div
                  data-plasmic-name={"headerHeroSection2"}
                  data-plasmic-override={overrides.headerHeroSection2}
                  className={classNames(
                    projectcss.all,
                    sty.headerHeroSection2,
                    {
                      [sty.headerHeroSection2global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    }
                  )}
                  id={"leads"}
                >
                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__tYKbm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fapgG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yx7Bv
                          )}
                        >
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1__jksyJ,
                              {
                                [sty.h1global_unnamedGlobalGroupOfVariants2_unnamedVariant__jksyJe9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Register Interest"}
                          </h1>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ceW6,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ceW6E9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#000000" }}
                              >
                                {
                                  "Fill your details and our team will be in touch with you within few minutes."
                                }
                              </span>
                            </React.Fragment>
                          </div>
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <Orange
                              className={classNames(
                                "__wab_instance",
                                sty.orange__rgGov
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__trJh2
                                  )}
                                >
                                  {"Save"}
                                </div>
                              }
                              size={"extraLarge"}
                              submitsForm={true}
                            />
                          ) : null}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__u8Lcw)}
                    >
                      <SignUpPrompt
                        data-plasmic-name={"signUpPrompt"}
                        data-plasmic-override={overrides.signUpPrompt}
                        className={classNames(
                          "__wab_instance",
                          sty.signUpPrompt,
                          {
                            [sty.signUpPromptglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                        slot={
                          <React.Fragment>
                            <Combobox
                              data-plasmic-name={"combobox"}
                              data-plasmic-override={overrides.combobox}
                              className={classNames(
                                "__wab_instance",
                                sty.combobox
                              )}
                              isOpen={generateStateValueProp($state, [
                                "combobox",
                                "isOpen"
                              ])}
                              items={<MenuItem label={"Home"} value={"home"} />}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lglxi
                                  )}
                                >
                                  {"Select internet package:"}
                                </div>
                              }
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "combobox",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updatePackage"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["_package"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updatePackage"] != null &&
                                    typeof $steps["updatePackage"] ===
                                      "object" &&
                                    typeof $steps["updatePackage"].then ===
                                      "function"
                                  ) {
                                    $steps["updatePackage"] = await $steps[
                                      "updatePackage"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "combobox",
                                  "isOpen"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Select State:"}
                              value={generateStateValueProp($state, [
                                "combobox",
                                "value"
                              ])}
                            />

                            <Combobox
                              data-plasmic-name={"combobox2"}
                              data-plasmic-override={overrides.combobox2}
                              className={classNames(
                                "__wab_instance",
                                sty.combobox2
                              )}
                              isOpen={generateStateValueProp($state, [
                                "combobox2",
                                "isOpen"
                              ])}
                              items={
                                <React.Fragment>
                                  <MenuItem
                                    label={
                                      "Unifi Home 100Mbps Pime promo @ RM89"
                                    }
                                    value={
                                      "Unifi Home 100Mbps Pime promo @ RM89"
                                    }
                                  />

                                  <MenuItem
                                    label={
                                      "Unifi Home 300Mbps Pime promo @ RM129"
                                    }
                                    value={
                                      "Unifi Home 300Mbps Pime promo @ RM129"
                                    }
                                  />

                                  <MenuItem
                                    label={
                                      "Unifi Home 500Mbps Pime promo @ RM149"
                                    }
                                    value={
                                      "Unifi Home 500Mbps Pime promo @ RM149"
                                    }
                                  />

                                  <MenuItem
                                    label={
                                      "Unifi Home 1Gbps Pime promo @ RM249"
                                    }
                                    value={
                                      "Unifi Home 1Gbps Pime promo @ RM249"
                                    }
                                  />

                                  <MenuItem
                                    label={
                                      "Unifi Home 2Gbps Pime promo @ RM319"
                                    }
                                    value={
                                      "Unifi Home 2Gbps Pime promo @ RM319"
                                    }
                                  />
                                </React.Fragment>
                              }
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___99UFg
                                  )}
                                >
                                  {"Home Package :"}
                                </div>
                              }
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "combobox2",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateHomePackage"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["homePackage"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateHomePackage"] != null &&
                                    typeof $steps["updateHomePackage"] ===
                                      "object" &&
                                    typeof $steps["updateHomePackage"].then ===
                                      "function"
                                  ) {
                                    $steps["updateHomePackage"] = await $steps[
                                      "updateHomePackage"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "combobox2",
                                  "isOpen"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Select:"}
                              value={generateStateValueProp($state, [
                                "combobox2",
                                "value"
                              ])}
                            />

                            <TextInput
                              data-plasmic-name={"textInput6"}
                              data-plasmic-override={overrides.textInput6}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput6
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput6",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateIc"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["ic"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateIc"] != null &&
                                    typeof $steps["updateIc"] === "object" &&
                                    typeof $steps["updateIc"].then ===
                                      "function"
                                  ) {
                                    $steps["updateIc"] = await $steps[
                                      "updateIc"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"NRIC/Passport NO\uff1a"}
                            />

                            <TextInput
                              data-plasmic-name={"textInputt"}
                              data-plasmic-override={overrides.textInputt}
                              className={classNames(
                                "__wab_instance",
                                sty.textInputt
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInputt",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateName"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["name"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateName"] != null &&
                                    typeof $steps["updateName"] === "object" &&
                                    typeof $steps["updateName"].then ===
                                      "function"
                                  ) {
                                    $steps["updateName"] = await $steps[
                                      "updateName"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"Full Name:"}
                            />

                            <TextInput
                              data-plasmic-name={"textInput"}
                              data-plasmic-override={overrides.textInput}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateEmail"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["email"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateEmail"] != null &&
                                    typeof $steps["updateEmail"] === "object" &&
                                    typeof $steps["updateEmail"].then ===
                                      "function"
                                  ) {
                                    $steps["updateEmail"] = await $steps[
                                      "updateEmail"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"Email:"}
                            />

                            <TextInput
                              data-plasmic-name={"textInput2"}
                              data-plasmic-override={overrides.textInput2}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput2
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput2",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updatePhoneNumber"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["phoneNumber"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updatePhoneNumber"] != null &&
                                    typeof $steps["updatePhoneNumber"] ===
                                      "object" &&
                                    typeof $steps["updatePhoneNumber"].then ===
                                      "function"
                                  ) {
                                    $steps["updatePhoneNumber"] = await $steps[
                                      "updatePhoneNumber"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"Mobile number(Malaysia):"}
                            />

                            <TextInput
                              data-plasmic-name={"textInput3"}
                              data-plasmic-override={overrides.textInput3}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput3,
                                {
                                  [sty.textInput3global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput3",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateAdress"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["adress"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateAdress"] != null &&
                                    typeof $steps["updateAdress"] ===
                                      "object" &&
                                    typeof $steps["updateAdress"].then ===
                                      "function"
                                  ) {
                                    $steps["updateAdress"] = await $steps[
                                      "updateAdress"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"Installation Adress:"}
                            />

                            <TextInput
                              data-plasmic-name={"textInput4"}
                              data-plasmic-override={overrides.textInput4}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput4
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput4",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Postcode:"}
                            />

                            <TextInput
                              data-plasmic-name={"textInput5"}
                              data-plasmic-override={overrides.textInput5}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput5
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput5",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateState"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["state"]
                                          },
                                          operation: 0,
                                          value: $event.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateState"] != null &&
                                    typeof $steps["updateState"] === "object" &&
                                    typeof $steps["updateState"].then ===
                                      "function"
                                  ) {
                                    $steps["updateState"] = await $steps[
                                      "updateState"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"State\uff1a Johor"}
                            />

                            <Orange
                              className={classNames(
                                "__wab_instance",
                                sty.orange___3ZOgm,
                                {
                                  [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___3ZOgmE9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                              color={"unnamedVariant"}
                              disabled={false}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t7Rc,
                                    {
                                      [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__t7RcE9Dzn]:
                                        hasVariant(
                                          globalVariants,
                                          "unnamedGlobalGroupOfVariants2",
                                          "unnamedVariant"
                                        )
                                    }
                                  )}
                                >
                                  {"Save"}
                                </div>
                              }
                              linkTo={(() => {
                                try {
                                  return (
                                    "https://wa.me/60107801215?text=Package:" +
                                    $state._package +
                                    "%0AHome Package:" +
                                    $state.homePackage +
                                    "%0AName:" +
                                    $state.name +
                                    "%0AIC:" +
                                    $state.ic +
                                    "%0AEmail:" +
                                    $state.email +
                                    "%0APhone Number:" +
                                    $state.phoneNumber +
                                    "%0AAdress:" +
                                    $state.adress +
                                    "%0APOst Code:" +
                                    $state.postcode +
                                    "%0AState:" +
                                    $state.state
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (
                                            "https://wa.me/60107801215?text=Name:" +
                                            $state.name +
                                            "%0AEmail:" +
                                            $state.email +
                                            "%0APhone Number:" +
                                            $state.phoneNumber +
                                            "%0AAdress:" +
                                            $state.adress
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                              openLinkInNewTab={true}
                              submitsForm={true}
                            />
                          </React.Fragment>
                        }
                      >
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange___5Vd6T
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__knL6T
                              )}
                            >
                              {"Save"}
                            </div>
                          }
                          size={"extraLarge"}
                          submitsForm={true}
                        />
                      </SignUpPrompt>
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange___2Dn2M
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6IsUj
                              )}
                            >
                              {"Save"}
                            </div>
                          }
                          size={"extraLarge"}
                          submitsForm={true}
                        />
                      ) : null}
                    </div>
                  </div>
                </div>
              </div>
            </Section>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section, {
                [sty.sectionglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
            >
              <div
                data-plasmic-name={"foreground3"}
                data-plasmic-override={overrides.foreground3}
                className={classNames(projectcss.all, sty.foreground3)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__yg7Qj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vPtGe, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__vPtGeE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2,
                        {
                          [sty.h2global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      {"WHY REGISTER UNIFI ONLINE WITH US?"}
                    </h2>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fft8B)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cQO8,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__cQO8E9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aNrvm,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__aNrvmE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__diOk, {
                              [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__diOkE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            })}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/whatsApp图标1756789393Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jzP2,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__jzP2E9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Easy"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kQUr,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__kQUrE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {
                            "you can just chat with us, and our professional team will assist you!"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cnqam
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7RPno,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___7RPnoe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__ntYwa)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/时间的流逝1756789423Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7NIBq,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___7NIBqE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"24/7 support"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eFxEq,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__eFxEqE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {
                            "We support 24/7 customer service. You can contact us via WhatsApp without further ado\uff01"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xcTgR
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uu5Kf,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__uu5KfE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__nOzNd)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/配送包裹1756789455Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yN6Uh,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__yN6UhE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Awesome packages"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8NanJ,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___8NanJe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {
                            "Our packages are designed to suit your needs. Want more speed? No problem! We make sure we have the right package for you."
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6PrGv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cFH
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__zlYs5)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/配送卡车1756948672Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xGuUo
                          )}
                        >
                          {"Speedy Service"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gxBc7
                          )}
                        >
                          {
                            "everything's incredibly fast! You'll be online and enjoying Unifi in no time"
                          }
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>
            <div className={classNames(projectcss.all, sty.freeBox__ruhG)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kedYc
                )}
              >
                {"WHY FAMILIES LOVE UNIFI HOME BROADBAND FIBRE INTERNET"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__cYoNs, {
                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__cYoNsE9Dzn]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants2",
                      "unnamedVariant"
                    )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__s7Vjd)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9ZJQ)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__mj9Yr)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"50px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/unifi/images/锤子和扳手1756949100Svg.svg",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r7Lls
                    )}
                  >
                    {"Convenience of EasyFix"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p4Wmh
                    )}
                  >
                    {
                      "Enjoy seamless fibre broadband connectivity with our EasyFix solutions, designed for easy and sustainable use."
                    }
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__oXX, {
                    [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__oXXe9Dzn]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eanyD)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___6CmMu)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"50px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/unifi/images/设置用扳手1756949382Svg.svg",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__af2Wp
                    )}
                  >
                    {"Free installation"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mBB
                    )}
                  >
                    {
                      "Experts in residential drilling, cabling and router placement for optimal Unifi installation. Standard setup is free!"
                    }
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__tCwor, {
                    [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__tCwore9Dzn]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ekkst)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__w5Cn8)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"50px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/unifi/images/家庭信号1756949582Svg.svg",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aKTcw
                    )}
                  >
                    {"24 Hours Service Restoration"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__leaq7
                    )}
                  >
                    {
                      "Count on us to keep your fibre internet running smoothly with 24/7 service restoration, ensuring your home stays connected at all times.\r\n"
                    }
                  </div>
                </div>
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox___2Cl5Z, {
                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___2Cl5Ze9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uWo73)}>
                <div className={classNames(projectcss.all, sty.freeBox___7DVW)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___0Hwii, {
                      [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___0Hwiie9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    displayHeight={
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      ) && hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "60px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      ) && hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "60px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/unifi/images/b33F4B5926838595Fdcda9Ab7B95Jpg.jpg",
                      fullWidth: 276,
                      fullHeight: 276,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qeUir,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__qeUire9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    }
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{
                        fontWeight: 700,
                        color: "var(--token-eS1b8sRQQFZc)"
                      }}
                    >
                      {"Name: Siti Aminah"}
                    </span>
                    <React.Fragment>{"\n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-eS1b8sRQQFZc)" }}
                    >
                      {"Sales Manager"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jP2Fv
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-eS1b8sRQQFZc)" }}
                    >
                      {
                        "\uff1aThe customer service team is always friendly and patient. They really take the time to explain everything clearly"
                      }
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qyDTw
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-x88XkqDiw08s)" }}
                    >
                      {" 3 months ago"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__jzNz6, {
                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__jzNz6E9Dzn]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants2",
                      "unnamedVariant"
                    )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__muKej)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__xWjg5, {
                      [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__xWjg5E9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    displayHeight={
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      ) && hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "60px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      ) && hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "60px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/unifi/images/_5386474858Cfbab81E66Aa4B5Bee7E85Jpg.jpg",
                      fullWidth: 720,
                      fullHeight: 877,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___50E1N,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___50E1NE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    }
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Name: Nur Aisyah"}
                    </span>
                    <React.Fragment>{"\nDesigner"}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fc5Ys,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__fc5YsE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          " \uff1aThey are always responsive and get back to me faster than other telcos I\u2019ve tried"
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          "\uff1aThey are always responsive and get back to me faster than other telcos I\u2019ve tried"
                        }
                      </span>
                    </React.Fragment>
                  )}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xbGw1
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-x88XkqDiw08s)" }}
                    >
                      {"7 months ago"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__c3Y9F, {
                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__c3Y9FE9Dzn]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants2",
                      "unnamedVariant"
                    )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___2YdUi)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kvwZe, {
                      [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__kvwZee9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    displayHeight={
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      ) && hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "60px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      ) && hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : "60px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/unifi/images/istockphoto984157268612X612Jpg.jpg",
                      fullWidth: 408,
                      fullHeight: 612,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fQm5L,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__fQm5Le9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    }
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{
                        fontWeight: 700,
                        color: "var(--token-eS1b8sRQQFZc)"
                      }}
                    >
                      {"Name:  Muhammad Hafiz"}
                    </span>
                    <React.Fragment>{"\n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-eS1b8sRQQFZc)" }}
                    >
                      {"IT Developer"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rcXj,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__rcXjE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          " \uff1aThe support team is always polite and friendly. They really care about their customers"
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          "\uff1aThe support team is always polite and friendly. They really care about their customers"
                        }
                      </span>
                    </React.Fragment>
                  )}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___99Hod
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "var(--token-x88XkqDiw08s)" }}
                    >
                      {"1 months ago"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
            </div>
            <Divider
              className={classNames("__wab_instance", sty.divider__qnxQc)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__fFdzL)} />
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__azP, {
              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__azPE9Dzn]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__bwkGa
              )}
            >
              {"FREQUENTLY ASK QUESTIONS"}
            </h1>
            <AntdAccordionItem
              className={classNames(
                "__wab_instance",
                sty.accordionItem__oygWf,
                {
                  [sty.accordionItemglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__oygWfE9Dzn]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants2",
                      "unnamedVariant"
                    )
                }
              )}
              headerClass={classNames({ [sty["pcls_DsuIkR_CbIA9"]]: true })}
              label2={"Collapse Header"}
              showArrow={true}
            >
              <div className={classNames(projectcss.all, sty.freeBox__bIBcq)}>
                {renderPlasmicSlot({
                  defaultContents: (() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.accordion__q9G1J
                      ),
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__e0L7A
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uWa75
                                )}
                              >
                                {"Can you tell me more about Unifi?"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1AyZr
                              )}
                            >
                              {
                                "Unifi provides access to a digital lifestyle for Malaysians through its converged offerings of reliable internet connectivity, content and devices for everyone in a household.  We offer seamless internet connectivity at home and beyond through our fibre, wireless, mobile, and solutions that help consumers stay connected at all times. "
                              }
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__oWllN
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lfvLz
                                )}
                              >
                                {
                                  "What are the benefits if I subscribe to Unifi Home?"
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iucro
                              )}
                            >
                              {
                                "Unifi will enhance your high speed Internet, mobile and entertainment experience by providing the fastest internet speed, greater variety of entertainment options for you and the whole family, affordable mobile packages with unlimited data and better service stability."
                              }
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      )
                    };

                    return <AntdAccordion {...child$Props} />;
                  })(),
                  value: args.accordion3
                })}
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "accordion2",
                      "activePanelId"
                    ]),
                    bordered: true,
                    className: classNames("__wab_instance", sty.accordion2),
                    items: (
                      <React.Fragment>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__d5BLg
                          )}
                          id={1}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jokT4
                              )}
                            >
                              {
                                "Is there any penalty charge if i terminate my Unifi Home AFTER the minumum subscription period is over?"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___20JUu
                            )}
                          >
                            {
                              "There will be no penalty charge for termination made after the minimum contract period (24 months)."
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__jpRug
                          )}
                          id={2}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Wyyn
                              )}
                            >
                              {"Can I upgrade/downgrade my Unifi Home plan?"}
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bnoTw
                            )}
                          >
                            {
                              "Yes, you are allowed to change to the higher/lower speed package at any time. However, depending on your package selection, you will be tied to a new contract period if the package offers better value such as it comes with a new device, discounted price or any other value added regardless of whether you are within or beyond the contract period."
                            }
                          </div>
                        </AntdAccordionItem>
                      </React.Fragment>
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion2", "activePanelId"],
                        AntdAccordion_Helpers
                      ).apply(null, eventArgs);
                    }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "accordion2.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"accordion2"}
                      data-plasmic-override={overrides.accordion2}
                      {...child$Props}
                    />
                  );
                })()}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                )
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion5",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion5),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__llZka
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___7Lgb0
                                  )}
                                >
                                  {
                                    "Turbocharged Speeds and Superior Operational Efficiency with Premium Mesh Wi-Fi 7"
                                  }
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__g998O
                                )}
                              >
                                {"NgBOONKIAT"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__l8Cy
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wGjFu
                                  )}
                                >
                                  {"ok"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__spS7B
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion5", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion5.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion5"}
                          data-plasmic-override={overrides.accordion5}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                )
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion6",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion6),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__t99D2
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9JEzq
                                  )}
                                >
                                  {
                                    "Turbocharged Speeds and Superior Operational Efficiency with Premium Mesh Wi-Fi 7"
                                  }
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0FVPk
                                )}
                              >
                                {"NgBOONKIAT"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem___6ZcXq
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5SmKt
                                  )}
                                >
                                  {"ok"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__a78C
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion6", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion6.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion6"}
                          data-plasmic-override={overrides.accordion6}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                )
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion7",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion7),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__zeDiz
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wekPb
                                  )}
                                >
                                  {
                                    "Turbocharged Speeds and Superior Operational Efficiency with Premium Mesh Wi-Fi 7"
                                  }
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__iuSyw
                                )}
                              >
                                {"NgBOONKIAT"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem___8IlYo
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hcgud
                                  )}
                                >
                                  {"ok"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hpjuJ
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion7", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion7.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion7"}
                          data-plasmic-override={overrides.accordion7}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
              </div>
            </AntdAccordionItem>
            <TextField
              data-plasmic-name={"textField"}
              data-plasmic-override={overrides.textField}
              className={classNames("__wab_instance", sty.textField)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["textField", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />

            <Select
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              ariaLabel={``}
              className={classNames("__wab_instance", sty.select)}
              isOpen={generateStateValueProp($state, ["select", "isOpen"])}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["select", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["select", "isOpen"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              showLabel={true}
              value={generateStateValueProp($state, ["select", "value"])}
            />

            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__xhzBt
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {""}
            </PlasmicLink__>
          </div>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__ia4Q2, {
              [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ia4Q2E9Dzn]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};

              $steps["goToNewPage"] = true
                ? (() => {
                    const actionArgs = { destination: `/new-page-4` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToNewPage"] != null &&
                typeof $steps["goToNewPage"] === "object" &&
                typeof $steps["goToNewPage"].then === "function"
              ) {
                $steps["goToNewPage"] = await $steps["goToNewPage"];
              }
            }}
            src={{
              src: "/plasmic/unifi/images/screenshot20250902091731Png.png",
              fullWidth: 1700,
              fullHeight: 443,
              aspectRatio: undefined
            }}
          />

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </PlasmicLink__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "sliderCarousel4",
    "mybottom",
    "banner",
    "sliderCarousel",
    "pricingSection",
    "headerHeroSection2",
    "columns",
    "signUpPrompt",
    "combobox",
    "combobox2",
    "textInput6",
    "textInputt",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "section",
    "foreground3",
    "h2",
    "accordion2",
    "accordion5",
    "accordion6",
    "accordion7",
    "textField",
    "select",
    "footerSection"
  ],
  navbar: ["navbar"],
  sliderCarousel4: ["sliderCarousel4", "mybottom"],
  mybottom: ["mybottom"],
  banner: ["banner", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"],
  pricingSection: [
    "pricingSection",
    "headerHeroSection2",
    "columns",
    "signUpPrompt",
    "combobox",
    "combobox2",
    "textInput6",
    "textInputt",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5"
  ],
  headerHeroSection2: [
    "headerHeroSection2",
    "columns",
    "signUpPrompt",
    "combobox",
    "combobox2",
    "textInput6",
    "textInputt",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5"
  ],
  columns: [
    "columns",
    "signUpPrompt",
    "combobox",
    "combobox2",
    "textInput6",
    "textInputt",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5"
  ],
  signUpPrompt: [
    "signUpPrompt",
    "combobox",
    "combobox2",
    "textInput6",
    "textInputt",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5"
  ],
  combobox: ["combobox"],
  combobox2: ["combobox2"],
  textInput6: ["textInput6"],
  textInputt: ["textInputt"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  textInput5: ["textInput5"],
  section: ["section", "foreground3", "h2"],
  foreground3: ["foreground3", "h2"],
  h2: ["h2"],
  accordion2: ["accordion2"],
  accordion5: ["accordion5"],
  accordion6: ["accordion6"],
  accordion7: ["accordion7"],
  textField: ["textField"],
  select: ["select"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  navbar: typeof Navbar;
  sliderCarousel4: typeof SliderWrapper;
  mybottom: typeof Mybottom;
  banner: typeof Banner;
  sliderCarousel: typeof SliderWrapper;
  pricingSection: typeof Section;
  headerHeroSection2: "div";
  columns: "div";
  signUpPrompt: typeof SignUpPrompt;
  combobox: typeof Combobox;
  combobox2: typeof Combobox;
  textInput6: typeof TextInput;
  textInputt: typeof TextInput;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  textInput5: typeof TextInput;
  section: "section";
  foreground3: "div";
  h2: "h2";
  accordion2: typeof AntdAccordion;
  accordion5: typeof AntdAccordion;
  accordion6: typeof AntdAccordion;
  accordion7: typeof AntdAccordion;
  textField: typeof TextField;
  select: typeof Select;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    sliderCarousel4: makeNodeComponent("sliderCarousel4"),
    mybottom: makeNodeComponent("mybottom"),
    banner: makeNodeComponent("banner"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    pricingSection: makeNodeComponent("pricingSection"),
    headerHeroSection2: makeNodeComponent("headerHeroSection2"),
    columns: makeNodeComponent("columns"),
    signUpPrompt: makeNodeComponent("signUpPrompt"),
    combobox: makeNodeComponent("combobox"),
    combobox2: makeNodeComponent("combobox2"),
    textInput6: makeNodeComponent("textInput6"),
    textInputt: makeNodeComponent("textInputt"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    textInput5: makeNodeComponent("textInput5"),
    section: makeNodeComponent("section"),
    foreground3: makeNodeComponent("foreground3"),
    h2: makeNodeComponent("h2"),
    accordion2: makeNodeComponent("accordion2"),
    accordion5: makeNodeComponent("accordion5"),
    accordion6: makeNodeComponent("accordion6"),
    accordion7: makeNodeComponent("accordion7"),
    textField: makeNodeComponent("textField"),
    select: makeNodeComponent("select"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
