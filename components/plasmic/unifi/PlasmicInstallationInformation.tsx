/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vEU7LntD2rfdBHtDX5FyyK
// Component: jTI1Xol278IT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: -BmQBNQ8nLWc/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectcss
import sty from "./PlasmicInstallationInformation.module.css"; // plasmic-import: jTI1Xol278IT/css

createPlasmicElementProxy;

export type PlasmicInstallationInformation__VariantMembers = {};
export type PlasmicInstallationInformation__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstallationInformation__VariantsArgs;
export const PlasmicInstallationInformation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInstallationInformation__ArgsType = {};
type ArgPropType = keyof PlasmicInstallationInformation__ArgsType;
export const PlasmicInstallationInformation__ArgProps =
  new Array<ArgPropType>();

export type PlasmicInstallationInformation__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
};

export interface DefaultInstallationInformationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstallationInformation__RenderFunc(props: {
  variants: PlasmicInstallationInformation__VariantsArgs;
  args: PlasmicInstallationInformation__ArgsType;
  overrides: PlasmicInstallationInformation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__uJdtF)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "200px"
                : "709px"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "108%"
                : "205%"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "450px"
                : "2800px"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/unifi/images/image.png",
              fullWidth: 1835,
              fullHeight: 797,
              aspectRatio: undefined
            }}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__wr8D)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "110%"
                : "205%"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "1000px"
                : "2800px"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/unifi/images/image2.png",
              fullWidth: 1642,
              fullHeight: 4417,
              aspectRatio: undefined
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar"],
  navbar: ["navbar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstallationInformation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstallationInformation__VariantsArgs;
    args?: PlasmicInstallationInformation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstallationInformation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstallationInformation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstallationInformation__ArgProps,
          internalVariantPropNames: PlasmicInstallationInformation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstallationInformation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstallationInformation";
  } else {
    func.displayName = `PlasmicInstallationInformation.${nodeName}`;
  }
  return func;
}

export const PlasmicInstallationInformation = Object.assign(
  // Top-level PlasmicInstallationInformation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),

    // Metadata about props expected for PlasmicInstallationInformation
    internalVariantProps: PlasmicInstallationInformation__VariantProps,
    internalArgProps: PlasmicInstallationInformation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstallationInformation;
/* prettier-ignore-end */
