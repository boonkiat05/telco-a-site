/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vEU7LntD2rfdBHtDX5FyyK
// Component: lKv83nDh19-V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectcss
import sty from "./PlasmicValueProp.module.css"; // plasmic-import: lKv83nDh19-V/css

createPlasmicElementProxy;

export type PlasmicValueProp__VariantMembers = {
  flatIcon: "flatIcon";
  vertical: "vertical";
  card: "card";
  noTitle: "noTitle";
  darkBackground: "darkBackground";
};
export type PlasmicValueProp__VariantsArgs = {
  flatIcon?: SingleBooleanChoiceArg<"flatIcon">;
  vertical?: SingleBooleanChoiceArg<"vertical">;
  card?: SingleBooleanChoiceArg<"card">;
  noTitle?: SingleBooleanChoiceArg<"noTitle">;
  darkBackground?: SingleBooleanChoiceArg<"darkBackground">;
};
type VariantPropType = keyof PlasmicValueProp__VariantsArgs;
export const PlasmicValueProp__VariantProps = new Array<VariantPropType>(
  "flatIcon",
  "vertical",
  "card",
  "noTitle",
  "darkBackground"
);

export type PlasmicValueProp__ArgsType = { title?: React.ReactNode };
type ArgPropType = keyof PlasmicValueProp__ArgsType;
export const PlasmicValueProp__ArgProps = new Array<ArgPropType>("title");

export type PlasmicValueProp__OverridesType = {
  root?: Flex__<"div">;
  contentContainer?: Flex__<"div">;
};

export interface DefaultValuePropProps {
  title?: React.ReactNode;
  flatIcon?: SingleBooleanChoiceArg<"flatIcon">;
  vertical?: SingleBooleanChoiceArg<"vertical">;
  card?: SingleBooleanChoiceArg<"card">;
  noTitle?: SingleBooleanChoiceArg<"noTitle">;
  darkBackground?: SingleBooleanChoiceArg<"darkBackground">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicValueProp__RenderFunc(props: {
  variants: PlasmicValueProp__VariantsArgs;
  args: PlasmicValueProp__ArgsType;
  overrides: PlasmicValueProp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "flatIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.flatIcon
      },
      {
        path: "vertical",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.vertical
      },
      {
        path: "card",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.card
      },
      {
        path: "noTitle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTitle
      },
      {
        path: "darkBackground",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.darkBackground
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        {
          [sty.rootcard]: hasVariant($state, "card", "card"),
          [sty.rootflatIcon]: hasVariant($state, "flatIcon", "flatIcon"),
          [sty.rootnoTitle]: hasVariant($state, "noTitle", "noTitle"),
          [sty.rootvertical]: hasVariant($state, "vertical", "vertical"),
          [sty.rootvertical_card]:
            hasVariant($state, "card", "card") &&
            hasVariant($state, "vertical", "vertical")
        }
      )}
    >
      <div
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        className={classNames(projectcss.all, sty.contentContainer, {
          [sty.contentContainerflatIcon]: hasVariant(
            $state,
            "flatIcon",
            "flatIcon"
          ),
          [sty.contentContainernoTitle]: hasVariant(
            $state,
            "noTitle",
            "noTitle"
          )
        })}
      >
        {(hasVariant($state, "noTitle", "noTitle") ? false : true)
          ? renderPlasmicSlot({
              defaultContents: "Label",
              value: args.title,
              className: classNames(sty.slotTargetTitle, {
                [sty.slotTargetTitledarkBackground]: hasVariant(
                  $state,
                  "darkBackground",
                  "darkBackground"
                ),
                [sty.slotTargetTitlenoTitle]: hasVariant(
                  $state,
                  "noTitle",
                  "noTitle"
                )
              })
            })
          : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "contentContainer"],
  contentContainer: ["contentContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  contentContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValueProp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValueProp__VariantsArgs;
    args?: PlasmicValueProp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValueProp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicValueProp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicValueProp__ArgProps,
          internalVariantPropNames: PlasmicValueProp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValueProp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValueProp";
  } else {
    func.displayName = `PlasmicValueProp.${nodeName}`;
  }
  return func;
}

export const PlasmicValueProp = Object.assign(
  // Top-level PlasmicValueProp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentContainer: makeNodeComponent("contentContainer"),

    // Metadata about props expected for PlasmicValueProp
    internalVariantProps: PlasmicValueProp__VariantProps,
    internalArgProps: PlasmicValueProp__ArgProps
  }
);

export default PlasmicValueProp;
/* prettier-ignore-end */
