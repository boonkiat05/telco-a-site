/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vEU7LntD2rfdBHtDX5FyyK
// Component: mwl6IqeUjC4O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: -BmQBNQ8nLWc/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Orange from "../../Orange"; // plasmic-import: 065BO1JJJI1f/component
import Divider from "../../Divider"; // plasmic-import: Yhtrs6aV_zFG/component
import SignUpPrompt from "../../SignUpPrompt"; // plasmic-import: kt8U1LS5Krmj/component
import Combobox from "../../Combobox"; // plasmic-import: a1dxSBJ94M_7/component
import MenuItem from "../../MenuItem"; // plasmic-import: tn0m7BktVF7t/component
import TextInput from "../../TextInput"; // plasmic-import: mfHNE4bO_GSv/component
import TextField from "../../TextField"; // plasmic-import: mQkrtvDi894X/component
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Select from "../../Select"; // plasmic-import: VCdGH-2ew8bj/component
import MenuSection from "../../MenuSection"; // plasmic-import: eRL10N7Swha-/component
import FooterSection from "../../FooterSection"; // plasmic-import: 1j-6x005Ca9B/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectcss
import sty from "./PlasmicBusiness.module.css"; // plasmic-import: mwl6IqeUjC4O/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: RV9gb3oAKBcE/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ft0TW_03C8R0/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: 6jQol7xAjhp0/icon
import WhatsappIconLogoSvgrepoComSvgIcon from "./icons/PlasmicIcon__WhatsappIconLogoSvgrepoComSvg"; // plasmic-import: usKkWV7dA3im/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: iQ5-jHFRIOSF/icon

createPlasmicElementProxy;

export type PlasmicBusiness__VariantMembers = {};
export type PlasmicBusiness__VariantsArgs = {};
type VariantPropType = keyof PlasmicBusiness__VariantsArgs;
export const PlasmicBusiness__VariantProps = new Array<VariantPropType>();

export type PlasmicBusiness__ArgsType = {
  children?: React.ReactNode;
  accordion3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBusiness__ArgsType;
export const PlasmicBusiness__ArgProps = new Array<ArgPropType>(
  "children",
  "accordion3"
);

export type PlasmicBusiness__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  button?: Flex__<typeof AntdButton>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  第一?: Flex__<"div">;
  第二?: Flex__<"div">;
  第三?: Flex__<"div">;
  第四?: Flex__<"div">;
  第五?: Flex__<"div">;
  section?: Flex__<"section">;
  foreground5?: Flex__<"div">;
  h2?: Flex__<"h2">;
  headerHeroSection2?: Flex__<"div">;
  columns?: Flex__<"div">;
  column?: Flex__<"div">;
  signUpPrompt?: Flex__<typeof SignUpPrompt>;
  combobox?: Flex__<typeof Combobox>;
  combobox3?: Flex__<typeof Combobox>;
  textInput5?: Flex__<typeof TextInput>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  textInput6?: Flex__<typeof TextInput>;
  textInput8?: Flex__<typeof TextInput>;
  textField?: Flex__<typeof TextField>;
  accordion2?: Flex__<typeof AntdAccordion>;
  accordion5?: Flex__<typeof AntdAccordion>;
  accordion6?: Flex__<typeof AntdAccordion>;
  accordion7?: Flex__<typeof AntdAccordion>;
  select?: Flex__<typeof Select>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultBusinessProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBusiness__RenderFunc(props: {
  variants: PlasmicBusiness__VariantsArgs;
  args: PlasmicBusiness__ArgsType;
  overrides: PlasmicBusiness__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "item1"
      },
      {
        path: "textField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "accordion2.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion5.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion6.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "accordion7.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput2.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "phoneNumber",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput3.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "address",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput4.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "combobox.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "combobox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "combobox3.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "combobox3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "_package",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.combobox.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "homePackage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.combobox3.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "ic",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput5.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "postcode",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput6.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "state",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput8.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "installationDate",
        type: "private",
        variableType: "dateRangeStrings",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textInput7.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBusiness.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBusiness.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBusiness.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            }
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar, {
              [sty.navbarglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__y35Hs)}
            loading={"lazy"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jdqTd)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__bhNqQ
                )}
              >
                {""}
              </h1>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__bskHb
                )}
              >
                {" BUSINESS BROADBAND"}
              </h1>
              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__edHc
                  )}
                >
                  {"Find out more"}
                </div>
              </AntdButton>
            </div>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__cKkfy)}
              displayHeight={"142px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/unifi/images/_1690354858311422Png.png",
                fullWidth: 1024,
                fullHeight: 683,
                aspectRatio: undefined
              }}
            />
          </div>
          <h1
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1__bfwvb,
              {
                [sty.h1global_unnamedGlobalGroupOfVariants2_unnamedVariant__bfwvbe9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              }
            )}
          >
            {"DISCOVER UNIFI BUSINESS BROADBAND PLANS"}
          </h1>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__q1Yqp
            )}
          >
            {"Reliable broadband plans that enable next-level business growth"}
          </div>
          {(() => {
            const child$Props = {
              arrows: false,
              autoplay: false,
              beforeChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentSlide",
                  ["sliderCarousel", "currentSlide"],
                  SliderWrapper_Helpers
                ).apply(null, eventArgs);
              },
              className: classNames("__wab_instance", sty.sliderCarousel),
              dots: true,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              pauseOnHover: true,
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"]
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],
              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                <div
                  data-plasmic-name={"\u7b2c\u4e00"}
                  data-plasmic-override={overrides.第一}
                  className={classNames(projectcss.all, sty.第一, {
                    [sty.第一global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Ojn1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2BkGs
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vRiNh,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__vRiNhE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__whHg5
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jrRKf
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ""
                              : "Collapse Table "}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dMA
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hmvo4,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__hmvo4E9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100MBPS"
                              : "100MPBS"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s7Z5,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__s7Z5E9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6LpR,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___6LpRe9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"RM"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8X3W1,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___8X3W1E9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"99"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fzG4T,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__fzG4Te9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"/month\n"}
                            </div>
                          </div>
                          <Orange
                            className={classNames(
                              "__wab_instance",
                              sty.orange__cv5Dw,
                              {
                                [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__cv5DwE9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ppDa5,
                                  {
                                    [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ppDa5E9Dzn]:
                                      hasVariant(
                                        globalVariants,
                                        "unnamedGlobalGroupOfVariants2",
                                        "unnamedVariant"
                                      )
                                  }
                                )}
                              >
                                {"Select"}
                              </div>
                            }
                            linkTo={""}
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToLeads"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: "#leads"
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToLeads"] != null &&
                                typeof $steps["goToLeads"] === "object" &&
                                typeof $steps["goToLeads"].then === "function"
                              ) {
                                $steps["goToLeads"] = await $steps["goToLeads"];
                              }
                            }}
                            openLinkInNewTab={true}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rX0K,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__rX0Ke9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Na5L
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"User"}
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yehBs,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__yehBse9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              ) ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      fontWeight: 700,
                                      color: "#0958d9",
                                      fontStyle: "italic"
                                    }}
                                  >
                                    {"Flexible micro"}
                                  </span>
                                  <React.Fragment>
                                    {"\nSupports up to 2-3 users on 5 devices"}
                                  </React.Fragment>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Flexible micro"}
                                  </span>
                                  <React.Fragment>
                                    {"\nSupports up to 2-3 users on 5 devices"}
                                  </React.Fragment>
                                </React.Fragment>
                              )}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qvxKe,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__qvxKee9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sxShb
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              ) ? (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Free Business Call Plan"}
                                  </span>
                                  <React.Fragment>{"\n"}</React.Fragment>
                                  {
                                    <h6
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h6,
                                        projectcss.__wab_text,
                                        sty.h6__ctHfO
                                      )}
                                    >
                                      {"(Simple Voice Plus)"}
                                    </h6>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Free Business Call Plan"}
                                  </span>
                                  <React.Fragment>{"\n"}</React.Fragment>
                                  {
                                    <blockquote
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.blockquote___3MQpT
                                      )}
                                    >
                                      {"(Simple Voice Plus)"}
                                    </blockquote>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              )}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__h0Yas
                              )}
                            >
                              {"SVP50"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v0HRs
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bpkvc
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Free DECT Phone"}
                                </span>
                              </React.Fragment>
                            </div>
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__abfm8
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kCjl1
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7EBq5
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Free Router"}
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__e56K,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__e56Ke9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Wi-Fi 6 Combo Box"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__f3VpE
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jByRj
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Mesh WIFI"}
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Raff
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <h5
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h5,
                                      projectcss.__wab_text,
                                      sty.h5__t63IO
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-Adhx1wxzF3VD)"
                                        }}
                                      >
                                        {"-"}
                                      </span>
                                    </React.Fragment>
                                  </h5>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bzrJr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0EeNt
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Restoration"}
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jC319
                              )}
                            >
                              {"24 hours"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tSaG3
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vpLt
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Contact Period"}
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nQmZa
                              )}
                            >
                              {"24 methods"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"\u7b2c\u4e8c"}
                  data-plasmic-override={overrides.第二}
                  className={classNames(projectcss.all, sty.第二, {
                    [sty.第二global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kFupP)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__iT8Qf,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__iT8Qfe9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xdviE
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5Si8G
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ""
                            : "Collapse Table "}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dD2O3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yEsSk,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__yEsSkE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "300MBPS"
                            : "100MPBS"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zWQmd,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__zWQmdE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ogCtw,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ogCtwe9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"RM"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__poas9,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__poas9E9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "139"
                              : "99"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uFsbq,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__uFsbqe9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"/month\n"}
                          </div>
                        </div>
                        <Orange
                          className={classNames(
                            "__wab_instance",
                            sty.orange__uYKlD,
                            {
                              [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__uYKlDe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kcZhj,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__kcZhjE9Dzn]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants2",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Select"}
                            </div>
                          }
                          linkTo={""}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToLeads"] = true
                              ? (() => {
                                  const actionArgs = { destination: "#leads" };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToLeads"] != null &&
                              typeof $steps["goToLeads"] === "object" &&
                              typeof $steps["goToLeads"].then === "function"
                            ) {
                              $steps["goToLeads"] = await $steps["goToLeads"];
                            }
                          }}
                          openLinkInNewTab={true}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oqfIw,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__oqfIwE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__icEA
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"User"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___12E6Z
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#0958d9", fontWeight: 700 }}
                                >
                                  {"Small outlet office or Snall NGO Office"}
                                </span>
                                <React.Fragment>
                                  {
                                    "\u00a0\nSupports up to 6 users on 10 devices\n"
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Flexible micro"}
                                </span>
                                <React.Fragment>
                                  {"\nSupports up to 2-3 users on 5 devices"}
                                </React.Fragment>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eOuxZ,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__eOuxZe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ppdv4
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Free Business Call Plan"}
                                </span>
                                <React.Fragment>{"\n"}</React.Fragment>
                                {
                                  <h6
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h6,
                                      projectcss.__wab_text,
                                      sty.h6__d7MvW
                                    )}
                                  >
                                    {"(Simple Voice Plus)"}
                                  </h6>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Free Business Call Plan"}
                                </span>
                                <React.Fragment>{"\n"}</React.Fragment>
                                {
                                  <blockquote
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.blockquote__weZjl
                                    )}
                                  >
                                    {"(Simple Voice Plus)"}
                                  </blockquote>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            )}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__caCWs
                            )}
                          >
                            {"SVP50"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b0Bwa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iPaIo
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free DECT Phone"}
                              </span>
                            </React.Fragment>
                          </div>
                          <CheckIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pqvNd
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pLmSs
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qu3Lx
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free Router"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qDz8R
                            )}
                          >
                            {"Wi-Fi 6 Combo Box"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__x61IR
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wlsJz
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Mesh WIFI"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__h4Zk8
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <h5
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h5,
                                      projectcss.__wab_text,
                                      sty.h5___1GC8M
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-eS1b8sRQQFZc)"
                                          }}
                                        >
                                          {"Wi-Fi 6 Combo Box Mesh"}
                                        </span>
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-Adhx1wxzF3VD)"
                                          }}
                                        >
                                          {"-"}
                                        </span>
                                      </React.Fragment>
                                    )}
                                  </h5>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <React.Fragment>{""}</React.Fragment>
                                {
                                  <h5
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h5,
                                      projectcss.__wab_text,
                                      sty.h5___1GC8M
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-eS1b8sRQQFZc)"
                                          }}
                                        >
                                          {"Wi-Fi 6 Combo Box Mesh"}
                                        </span>
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        <span
                                          className={
                                            "plasmic_default__all plasmic_default__span"
                                          }
                                          style={{
                                            color: "var(--token-Adhx1wxzF3VD)"
                                          }}
                                        >
                                          {"-"}
                                        </span>
                                      </React.Fragment>
                                    )}
                                  </h5>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jPq7W
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j34Ad
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Restoration"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vohlr
                            )}
                          >
                            {"24 hours"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nliHt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7Az9M
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Contact Period"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__krrdQ
                            )}
                          >
                            {"24 methods"}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"\u7b2c\u4e09"}
                  data-plasmic-override={overrides.第三}
                  className={classNames(projectcss.all, sty.第三, {
                    [sty.第三global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pnxd, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__pnxdE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ySU6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aqC5
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : "Collapse Table "}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ui7VN)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nnToz,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__nnTozE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "500MBPS"
                          : "100MPBS"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jZla,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__jZlaE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gehc,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__gehcE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"RM"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bHwK2,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__bHwK2E9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "179"
                            : "99"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tz2Hu,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__tz2HuE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"/month\n"}
                        </div>
                      </div>
                      <Orange
                        className={classNames(
                          "__wab_instance",
                          sty.orange__oEriY,
                          {
                            [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__oEriYe9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6Diry,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___6Dirye9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Select"}
                          </div>
                        }
                        linkTo={""}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToLeads"] = true
                            ? (() => {
                                const actionArgs = { destination: "#leads" };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToLeads"] != null &&
                            typeof $steps["goToLeads"] === "object" &&
                            typeof $steps["goToLeads"].then === "function"
                          ) {
                            $steps["goToLeads"] = await $steps["goToLeads"];
                          }
                        }}
                        openLinkInNewTab={true}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bSsvw,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__bSsvwE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__miUlg
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"User"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ksBp5
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#0958d9", fontWeight: 700 }}
                              >
                                {"Flexible micro\u00a0"}
                              </span>
                              <React.Fragment>
                                {"\nSupports up to 2-3 users on 5 devices\n"}
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Flexible micro"}
                              </span>
                              <React.Fragment>
                                {"\nSupports up to 2-3 users on 5 devices"}
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hy6J,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__hy6JE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7QaeQ
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free Business Call Plan"}
                              </span>
                              <React.Fragment>{"\n"}</React.Fragment>
                              {
                                <h6
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h6,
                                    projectcss.__wab_text,
                                    sty.h6__vIcFg
                                  )}
                                >
                                  {"(Simple Voice Plus)"}
                                </h6>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free Business Call Plan"}
                              </span>
                              <React.Fragment>{"\n"}</React.Fragment>
                              {
                                <blockquote
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.blockquote__k67X
                                  )}
                                >
                                  {"(Simple Voice Plus)"}
                                </blockquote>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e4Ro
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "SVP70"
                            : "SVP50"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___46E8
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__agScH
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Free DECT Phone"}
                            </span>
                          </React.Fragment>
                        </div>
                        <CheckIcon
                          className={classNames(projectcss.all, sty.svg__vsx3)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mHggM
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cvTxU
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Free Router"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9JcBm
                          )}
                        >
                          {"Wi-Fi 6 Combo Box"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vWjez
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wWwRd
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Mesh WIFI"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tjfL7
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__jE4L6
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-eS1b8sRQQFZc)"
                                        }}
                                      >
                                        {"Wi-Fi 6 Combo Box Mesh"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-Adhx1wxzF3VD)"
                                        }}
                                      >
                                        {"-"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__jE4L6
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-eS1b8sRQQFZc)"
                                        }}
                                      >
                                        {"Wi-Fi 6 Combo Box Mesh"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-Adhx1wxzF3VD)"
                                        }}
                                      >
                                        {"-"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9VqCo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yNwZe
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Restoration"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__duktV
                          )}
                        >
                          {"24 hours"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___50KQ7
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fjT9S
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Contact Period"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dWlJ
                          )}
                        >
                          {"24 methods"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"\u7b2c\u56db"}
                  data-plasmic-override={overrides.第四}
                  className={classNames(projectcss.all, sty.第四, {
                    [sty.第四global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wbF1E, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__wbF1Ee9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bCm2B)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tTaaP
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : "Collapse Table "}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sFgd2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9PQZs,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___9PQZsE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "1GBPS"
                          : "100MPBS"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wYq8V,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__wYq8VE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g1HuQ,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__g1HuQe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"RM"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wU9XR,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__wU9XRe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "319"
                            : "99"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dCXr,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__dCXre9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"/month\n"}
                        </div>
                      </div>
                      <Orange
                        className={classNames(
                          "__wab_instance",
                          sty.orange__wUvzY,
                          {
                            [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__wUvzYe9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__idFy2,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__idFy2E9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Select"}
                          </div>
                        }
                        linkTo={""}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToLeads"] = true
                            ? (() => {
                                const actionArgs = { destination: "#leads" };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToLeads"] != null &&
                            typeof $steps["goToLeads"] === "object" &&
                            typeof $steps["goToLeads"].then === "function"
                          ) {
                            $steps["goToLeads"] = await $steps["goToLeads"];
                          }
                        }}
                        openLinkInNewTab={true}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uCRl,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__uCRlE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9I9UJ
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"User"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9EGOd
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{
                                  color: "var(--token-zXou5HA2hb1R)",
                                  fontWeight: 700
                                }}
                              >
                                {"Larger Business Premise Setting"}
                              </span>
                              <React.Fragment>{""}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-zXou5HA2hb1R)" }}
                              >
                                {"\u00a0"}
                              </span>
                              <React.Fragment>
                                {
                                  "\nSupport up to 10 power users on multiple devices\n"
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Flexible micro"}
                              </span>
                              <React.Fragment>
                                {"\nSupports up to 2-3 users on 5 devices"}
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vXbMe,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__vXbMeE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nz7Cw
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free Business Call Plan"}
                              </span>
                              <React.Fragment>{"\n"}</React.Fragment>
                              {
                                <h6
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h6,
                                    projectcss.__wab_text,
                                    sty.h6___1KGep
                                  )}
                                >
                                  {"(Simple Voice Plus)"}
                                </h6>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free Business Call Plan"}
                              </span>
                              <React.Fragment>{"\n"}</React.Fragment>
                              {
                                <blockquote
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.blockquote__jw7Tf
                                  )}
                                >
                                  {"(Simple Voice Plus)"}
                                </blockquote>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zaN6
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "SVP70"
                            : "SVP50"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xjv3N
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w9Apl
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Free DECT Phone"}
                            </span>
                          </React.Fragment>
                        </div>
                        <CheckIcon
                          className={classNames(projectcss.all, sty.svg__kteBr)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9UtLe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dowF
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Free Router"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vqf5I
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Wi-Fi 7 Combo Box"
                            : "Wi-Fi 6 Combo Box"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r8BU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wGrQ
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Mesh WIFI"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wrJvL
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__qL7B
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-eS1b8sRQQFZc)"
                                        }}
                                      >
                                        {"Wi-Fi 7 Combo Box Mesh"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-Adhx1wxzF3VD)"
                                        }}
                                      >
                                        {"-"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__qL7B
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-eS1b8sRQQFZc)"
                                        }}
                                      >
                                        {"Wi-Fi 7 Combo Box Mesh"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-Adhx1wxzF3VD)"
                                        }}
                                      >
                                        {"-"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__swx3C
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0SzFr
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Restoration"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rW4Xq
                          )}
                        >
                          {"24 hours"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vu2HT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sVw7S
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Contact Period"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qpnjo
                          )}
                        >
                          {"24 methods"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"\u7b2c\u4e94"}
                  data-plasmic-override={overrides.第五}
                  className={classNames(projectcss.all, sty.第五, {
                    [sty.第五global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__s7I, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__s7Ie9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gLz3B)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i4JvT
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : "Collapse Table "}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__oItNx,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__oItNxE9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__btNtL,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__btNtLe9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "2GBPS"
                          : "100MPBS"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2OZ40,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___2OZ40E9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__thLza,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__thLzaE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"RM"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gXzak,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__gXzake9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "369"
                            : "99"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gq7Gq,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__gq7GqE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"/month\n"}
                        </div>
                      </div>
                      <Orange
                        className={classNames(
                          "__wab_instance",
                          sty.orange__q92DP,
                          {
                            [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__q92DPe9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__quHLe,
                              {
                                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__quHLeE9Dzn]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants2",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Select"}
                          </div>
                        }
                        linkTo={""}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToLeads"] = true
                            ? (() => {
                                const actionArgs = { destination: "#leads" };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToLeads"] != null &&
                            typeof $steps["goToLeads"] === "object" &&
                            typeof $steps["goToLeads"].then === "function"
                          ) {
                            $steps["goToLeads"] = await $steps["goToLeads"];
                          }
                        }}
                        openLinkInNewTab={true}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jwCt7,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__jwCt7E9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__paqJ
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"User"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t50Db
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#0958d9", fontWeight: 700 }}
                              >
                                {"Larger Business Premise Setting\u00a0"}
                              </span>
                              <React.Fragment>
                                {
                                  "\nUltimate support for up to 10 power users on multiple devices\n"
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Flexible micro"}
                              </span>
                              <React.Fragment>
                                {"\nSupports up to 2-3 users on 5 devices"}
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__puiLj,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__puiLje9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fDr0
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free Business Call Plan"}
                              </span>
                              <React.Fragment>{"\n"}</React.Fragment>
                              {
                                <h6
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h6,
                                    projectcss.__wab_text,
                                    sty.h6__ybgq6
                                  )}
                                >
                                  {"(Simple Voice Plus)"}
                                </h6>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Free Business Call Plan"}
                              </span>
                              <React.Fragment>{"\n"}</React.Fragment>
                              {
                                <blockquote
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.blockquote___7SXrM
                                  )}
                                >
                                  {"(Simple Voice Plus)"}
                                </blockquote>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dCuaf
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "SVP70"
                            : "SVP50"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ekl6I
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hoygr
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Free DECT Phone"}
                            </span>
                          </React.Fragment>
                        </div>
                        <CheckIcon
                          className={classNames(projectcss.all, sty.svg__thZpD)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__auIlJ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aUzZd
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Free Router"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nl0Gz
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Wi-Fi 7 Combo Box"
                            : "Wi-Fi 6 Combo Box"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rqMgr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7KpVp
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Mesh WIFI"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Ozbq
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__eTdY1
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-eS1b8sRQQFZc)"
                                        }}
                                      >
                                        {"Wi-Fi 7 Combo Box Mesh"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-Adhx1wxzF3VD)"
                                        }}
                                      >
                                        {"-"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__eTdY1
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-eS1b8sRQQFZc)"
                                        }}
                                      >
                                        {"Wi-Fi 7 Combo Box Mesh"}
                                      </span>
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{
                                          color: "var(--token-Adhx1wxzF3VD)"
                                        }}
                                      >
                                        {"-"}
                                      </span>
                                    </React.Fragment>
                                  )}
                                </h5>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ttVlp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i7Eu8
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Restoration"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mVyvZ
                          )}
                        >
                          {"24 hours"}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o4OKd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ymZp6
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Contact Period"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9E9Gn
                          )}
                        >
                          {"24 methods"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </SliderWrapper>
            );
          })()}
          <div className={classNames(projectcss.all, sty.freeBox__bGj2Y)}>
            <Orange
              className={classNames("__wab_instance", sty.orange__crGx3)}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__vX8Hz, {
                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__vX8Hze9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__axAYl)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__jWZbl, {
                    [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__jWZblE9Dzn]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___648Sc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gBpq0
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ""
                        : "Collapse Table "}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__beOnn
                    )}
                  >
                    {"Collapse Table "}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tK3V)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ct9Z2,
                        {
                          [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__ct9Z2E9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      {"100MBPS"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xwJzd,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__xwJzde9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fsH21,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__fsH21E9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"RM"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d7W03,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__d7W03E9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"99"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__riUl,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__riUlE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"/month\n"}
                      </div>
                    </div>
                    <Orange
                      className={classNames(
                        "__wab_instance",
                        sty.orange___7K04Q,
                        {
                          [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___7K04Qe9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hkdZi,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__hkdZie9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Select"}
                        </div>
                      }
                      linkTo={""}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToLeads"] = true
                          ? (() => {
                              const actionArgs = { destination: "#leads" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToLeads"] != null &&
                          typeof $steps["goToLeads"] === "object" &&
                          typeof $steps["goToLeads"].then === "function"
                        ) {
                          $steps["goToLeads"] = await $steps["goToLeads"];
                        }
                      }}
                      openLinkInNewTab={true}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yZsbk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__d8Jbp)}
                    >
                      {renderPlasmicSlot({
                        defaultContents: "300MBBPS",
                        value: args.children,
                        className: classNames(sty.slotTargetChildren, {
                          [sty.slotTargetChildrenglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        })
                      })}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__h92Gl,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__h92GlE9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q3CJy,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__q3CJyE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"RM"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x8Zc,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__x8Zce9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"139"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oai1A,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__oai1AE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"/month\n"}
                      </div>
                    </div>
                    <Orange
                      className={classNames(
                        "__wab_instance",
                        sty.orange__riDwj,
                        {
                          [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__riDwjE9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__leXlM,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__leXlMe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Select"}
                        </div>
                      }
                      linkTo={""}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToLeads"] = true
                          ? (() => {
                              const actionArgs = { destination: "#leads" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToLeads"] != null &&
                          typeof $steps["goToLeads"] === "object" &&
                          typeof $steps["goToLeads"].then === "function"
                        ) {
                          $steps["goToLeads"] = await $steps["goToLeads"];
                        }
                      }}
                      openLinkInNewTab={true}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gYgLt)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r7Yzq,
                        {
                          [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__r7YzqE9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      {"500MBPS"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__lM6Fw,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__lM6Fwe9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vOoJt,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__vOoJte9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"RM"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h4Vo,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__h4VoE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"179"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Lpja,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___8Lpjae9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"/month\n"}
                      </div>
                    </div>
                    <Orange
                      className={classNames(
                        "__wab_instance",
                        sty.orange__se9I0,
                        {
                          [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__se9I0E9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7WTzb,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___7WTzbE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Select"}
                        </div>
                      }
                      linkTo={""}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = { destination: "#leads" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      openLinkInNewTab={true}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__f67Sm, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__f67SmE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pmXg4,
                        {
                          [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__pmXg4E9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      {"1 GBPS"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xstrV)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pvCZv,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__pvCZvE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"RM"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__naEmn,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__naEmne9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"319"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3S8ZL,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___3S8ZLe9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"/month\n"}
                      </div>
                    </div>
                    <Orange
                      className={classNames(
                        "__wab_instance",
                        sty.orange__dEWy,
                        {
                          [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__dEWyE9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aqD9K,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__aqD9KE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Select"}
                        </div>
                      }
                      linkTo={""}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToLeads"] = true
                          ? (() => {
                              const actionArgs = { destination: "#leads" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToLeads"] != null &&
                          typeof $steps["goToLeads"] === "object" &&
                          typeof $steps["goToLeads"].then === "function"
                        ) {
                          $steps["goToLeads"] = await $steps["goToLeads"];
                        }
                      }}
                      openLinkInNewTab={true}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xcNqf, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__xcNqfe9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lgEj5,
                        {
                          [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__lgEj5E9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      {"2 GBPS"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9EnD1
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wgaWw,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__wgaWwE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"RM"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iAQna,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__iAQnaE9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"369"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cmr3W,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__cmr3We9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"/month\n"}
                      </div>
                    </div>
                    <Orange
                      className={classNames(
                        "__wab_instance",
                        sty.orange__gKnZj,
                        {
                          [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__gKnZjE9Dzn]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7XQc6,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___7XQc6E9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Select"}
                        </div>
                      }
                      linkTo={""}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToLeads"] = true
                          ? (() => {
                              const actionArgs = { destination: "#leads" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToLeads"] != null &&
                          typeof $steps["goToLeads"] === "object" &&
                          typeof $steps["goToLeads"].then === "function"
                        ) {
                          $steps["goToLeads"] = await $steps["goToLeads"];
                        }
                      }}
                      openLinkInNewTab={true}
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___46Mxk, {
                    [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___46Mxke9Dzn]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tm665
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"User"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1E9Gn
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958d9",
                            fontStyle: "italic"
                          }}
                        >
                          {"Flexible micro"}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958d9",
                            fontStyle: "italic"
                          }}
                        >
                          {""}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958d9",
                            fontStyle: "italic"
                          }}
                        >
                          {""}
                        </span>
                        <React.Fragment>
                          {"\nSupports up to 2-3 users on 5 devices"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Flexible micro"}
                        </span>
                        <React.Fragment>
                          {"\nSupports up to 2-3 users on 5 devices"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oPkNo
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958D9",
                            fontStyle: "italic"
                          }}
                        >
                          {"Small outlet office or Small NGO Office"}
                        </span>
                        <React.Fragment>
                          {"\nSupports up to 6 users on 10 devices"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Small outlet office or Snall NGO Office"}
                        </span>
                        <React.Fragment>
                          {"\nSupports up to 6 users on 10 devices"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r2Pk,
                      {
                        [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__r2PkE9Dzn]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants2",
                            "unnamedVariant"
                          )
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958D9",
                            fontStyle: "italic"
                          }}
                        >
                          {"Flexible micro"}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958D9",
                            fontStyle: "italic"
                          }}
                        >
                          {""}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958D9",
                            fontStyle: "italic"
                          }}
                        >
                          {""}
                        </span>
                        <React.Fragment>
                          {"\nSupports up to 2-3 users on 5 devices"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Flexible micro"}
                        </span>
                        <React.Fragment>
                          {"\nSupports up to 2-3 users on 5 devices"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qpCcy,
                      {
                        [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__qpCcye9Dzn]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants2",
                            "unnamedVariant"
                          )
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958D9",
                            fontStyle: "italic"
                          }}
                        >
                          {"Larger Business Premise Setting"}
                        </span>
                        <React.Fragment>
                          {"\nSupport up to 10 power users on multiple devices"}
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Larger Business Premise Setting"}
                        </span>
                        <React.Fragment>
                          {"\nSupport up to 10 power users on multiple devices"}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oNnD
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "#0958D9",
                            fontStyle: "italic"
                          }}
                        >
                          {"Larger Business Premise Setting"}
                        </span>
                        <React.Fragment>
                          {
                            "\nUltimate support for up to 10 power users on multiple devices"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Larger Business Premise Setting"}
                        </span>
                        <React.Fragment>
                          {
                            "\nUltimate support for up to 10 power users on multiple devices"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tiQbM)}>
                  <Divider
                    className={classNames("__wab_instance", sty.divider__nvPcU)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__opilf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xLps8
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Free Business Call Plan"}
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          {
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__peSo2
                              )}
                            >
                              {"(Simple Voice Plus)"}
                            </h6>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Free Business Call Plan"}
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          {
                            <blockquote
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.blockquote__ahoRs
                              )}
                            >
                              {"(Simple Voice Plus)"}
                            </blockquote>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      )}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xllPd
                      )}
                    >
                      {"SVP50"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dzz2O
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "SVP50"
                        : "SVP50"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Thw3
                      )}
                    >
                      {"SVP70"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pAyhj
                      )}
                    >
                      {"SVP70"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z1UCl
                      )}
                    >
                      {"SVP70"}
                    </div>
                  </div>
                  <Divider
                    className={classNames("__wab_instance", sty.divider__boSlg)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__vAscI)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__adrf9
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Free DECT Phone"}
                        </span>
                      </React.Fragment>
                    </div>
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__zkYfC)}
                      role={"img"}
                    />

                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg___5ImkB)}
                      role={"img"}
                    />

                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__zduj)}
                      role={"img"}
                    />

                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__re453)}
                      role={"img"}
                    />

                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__eUYuh)}
                      role={"img"}
                    />
                  </div>
                  <Divider
                    className={classNames(
                      "__wab_instance",
                      sty.divider___0LcDn
                    )}
                  />

                  <div className={classNames(projectcss.all, sty.freeBox__yg6)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h2FA2
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Free Router"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bd1Ql
                      )}
                    >
                      {"Wi-Fi 6 Combo Box"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___40MfC
                      )}
                    >
                      {"Wi-Fi 6 Combo Box"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mvcaR
                      )}
                    >
                      {"Wi-Fi 6 Combo Box"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oMTsU
                      )}
                    >
                      {"Wi-Fi 7 Combo Box"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zcY90
                      )}
                    >
                      {"Wi-Fi 7 Combo Box"}
                    </div>
                  </div>
                  <Divider
                    className={classNames(
                      "__wab_instance",
                      sty.divider___54ZSs
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ik0Dz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4EPe
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Mesh WIFI"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xq4Jb
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__gtxyf
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-Adhx1wxzF3VD)" }}
                              >
                                {"-"}
                              </span>
                            </React.Fragment>
                          </h5>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j14A9
                      )}
                    >
                      {"Wi-Fi 6 Combo Box Mesh"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i2Z9R
                      )}
                    >
                      {"Wi-Fi 6 Combo Box Mesh"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qs6Yv
                      )}
                    >
                      {"Wi-Fi 7 Combo Box Mesh"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uq4Mb
                      )}
                    >
                      {"Wi-Fi 7 Combo Box Mesh"}
                    </div>
                  </div>
                  <Divider
                    className={classNames("__wab_instance", sty.divider__zIhCz)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__yoJj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hCLv
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Restoration"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ctO5K
                      )}
                    >
                      {"24 hours"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qv8F9
                      )}
                    >
                      {"24 hours"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jeIp5
                      )}
                    >
                      {"24 hours"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jcAch
                      )}
                    >
                      {"24 hours"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mkxPm
                      )}
                    >
                      {"24 hours"}
                    </div>
                  </div>
                  <Divider
                    className={classNames("__wab_instance", sty.divider__pfzNb)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___5IvG5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tuNs9
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Contact Period"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l2PI
                      )}
                    >
                      {"24 methods"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vMpd
                      )}
                    >
                      {"24 methods"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tI98
                      )}
                    >
                      {"24 methods"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___36I5R
                      )}
                    >
                      {"24 methods"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aV8BL
                      )}
                    >
                      {"24 methods"}
                    </div>
                  </div>
                  <Divider
                    className={classNames("__wab_instance", sty.divider__yzEzI)}
                  />
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section, {
                [sty.sectionglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
            >
              <div
                data-plasmic-name={"foreground5"}
                data-plasmic-override={overrides.foreground5}
                className={classNames(projectcss.all, sty.foreground5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__sbBvs)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rdY35, {
                      [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__rdY35E9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2,
                        {
                          [sty.h2global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants2",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      {"WHY REGISTER UNIFI ONLINE WITH US?"}
                    </h2>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eChc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nadU8,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__nadU8E9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z3CD,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__z3CDe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__dlkd, {
                              [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__dlkdE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            })}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/whatsApp图标1756789393Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nDpxU,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__nDpxUe9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Easy"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uFFof,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__uFFofE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {
                            "you can just chat with us, and our professional team will assist you!"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b9O0P
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qCwe,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__qCwee9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__fGErG)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/时间的流逝1756789423Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zC3W,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__zC3WE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"24/7 support"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eeCzk,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__eeCzkE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {
                            "We support 24/7 customer service. You can contact us via WhatsApp without further ado\uff01"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wdCzI
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9Qf6I,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___9Qf6Ie9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__pU9Q)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/配送包裹1756789455Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jvFx5,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__jvFx5E9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {"Awesome packages"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2Ehlu,
                            {
                              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___2EhluE9Dzn]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants2",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          {
                            "Our packages are designed to suit your needs. Want more speed? No problem! We make sure we have the right package for you."
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fiiUz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ruzEu
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__wLq9J)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/unifi/images/配送卡车1756948672Svg.svg",
                              fullWidth: 256,
                              fullHeight: 256,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lOGpu
                          )}
                        >
                          {"Speedy Service"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ce6RC
                          )}
                        >
                          {
                            "everything's incredibly fast! You'll be online and enjoying Unifi in no time"
                          }
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>
            <div className={classNames(projectcss.all, sty.freeBox__hNzi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tbzD1
                )}
              >
                {"WHY FAMILIES LOVE UNIFI HOME BROADBAND FIBRE INTERNET"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__foJhj)}>
                <div className={classNames(projectcss.all, sty.freeBox__r2XdQ)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tGjWt)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__rAuO)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"50px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/unifi/images/锤子和扳手1756949100Svg.svg",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h2Rih
                    )}
                  >
                    {"Convenience of EasyFix"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jsQiw
                    )}
                  >
                    {
                      "Enjoy seamless fibre broadband connectivity with our EasyFix solutions, designed for easy and sustainable use."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ukTzv)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l5MlK)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__dST)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"50px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/unifi/images/设置用扳手1756949382Svg.svg",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iv6O3
                    )}
                  >
                    {"Free installation"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__synXm
                    )}
                  >
                    {
                      "Experts in residential drilling, cabling and router placement for optimal Unifi installation. Standard setup is free!"
                    }
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__qUk4, {
                    [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__qUk4E9Dzn]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants2",
                        "unnamedVariant"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bKsyp)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__gbz6W)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"50px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/unifi/images/家庭信号1756949582Svg.svg",
                        fullWidth: 256,
                        fullHeight: 256,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vyux0
                    )}
                  >
                    {"24 Hours Service Restoration"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uABk
                    )}
                  >
                    {
                      "Count on us to keep your fibre internet running smoothly with 24/7 service restoration, ensuring your home stays connected at all times.\r\n"
                    }
                  </div>
                </div>
              </div>
            </div>
          </div>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? false : true
          ) ? (
            <Orange
              className={classNames("__wab_instance", sty.orange__vcCay)}
              label={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kXIy
                    )}
                  >
                    {"Whatsapp us"}
                  </div>
                  <WhatsappIconLogoSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__yk6Wm)}
                    role={"img"}
                  />
                </React.Fragment>
              }
              linkTo={"https://wa.me/60107801215?text=Hi!"}
              onClick={async event => {
                const $steps = {};
              }}
              openLinkInNewTab={true}
            />
          ) : null}
          <div
            data-plasmic-name={"headerHeroSection2"}
            data-plasmic-override={overrides.headerHeroSection2}
            className={classNames(projectcss.all, sty.headerHeroSection2, {
              [sty.headerHeroSection2global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
            id={"leads"}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div
                data-plasmic-name={"column"}
                data-plasmic-override={overrides.column}
                className={classNames(projectcss.all, sty.column)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ue1C6)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yQ6DX)}
                    id={"leads"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bvxrQ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eaAe
                        )}
                      >
                        {"Start !"}
                      </div>
                    </div>
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___7B9Ma
                      )}
                    >
                      {"Register Now"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j3IT
                      )}
                    >
                      {
                        "In order to contact you, fill in your details and we will text you later via Whatsapp"
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <SignUpPrompt
              data-plasmic-name={"signUpPrompt"}
              data-plasmic-override={overrides.signUpPrompt}
              className={classNames("__wab_instance", sty.signUpPrompt, {
                [sty.signUpPromptglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
              slot={
                <React.Fragment>
                  <Combobox
                    data-plasmic-name={"combobox"}
                    data-plasmic-override={overrides.combobox}
                    className={classNames("__wab_instance", sty.combobox, {
                      [sty.comboboxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    isOpen={generateStateValueProp($state, [
                      "combobox",
                      "isOpen"
                    ])}
                    items={<MenuItem label={"Business"} value={"Business"} />}
                    label={"Select internet package:"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "combobox",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updatePackage"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["_package"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePackage"] != null &&
                          typeof $steps["updatePackage"] === "object" &&
                          typeof $steps["updatePackage"].then === "function"
                        ) {
                          $steps["updatePackage"] = await $steps[
                            "updatePackage"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "combobox",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"Select\uff1a"}
                    value={generateStateValueProp($state, [
                      "combobox",
                      "value"
                    ])}
                  />

                  <Combobox
                    data-plasmic-name={"combobox3"}
                    data-plasmic-override={overrides.combobox3}
                    className={classNames("__wab_instance", sty.combobox3)}
                    isOpen={generateStateValueProp($state, [
                      "combobox3",
                      "isOpen"
                    ])}
                    items={
                      <React.Fragment>
                        <MenuItem
                          label={"Unifi Business 100Mbps Pime promo @ RM99"}
                          value={"Unifi Business 100Mbps Pime promo @ RM99"}
                        />

                        <MenuItem
                          label={"Unifi Business 300Mbps Pime promo @ RM139"}
                          value={"Unifi Business 300Mbps Pime promo @ RM139"}
                        />

                        <MenuItem
                          label={"Unifi Business 500Mbps Pime promo @ RM179"}
                          value={"Unifi Business 500Mbps Pime promo @ RM179"}
                        />

                        <MenuItem
                          label={"Unifi Business 1Gbps Pime promo @ RM319"}
                          value={"Unifi Business 1Gbps Pime promo @ RM319"}
                        />

                        <MenuItem
                          label={"Unifi Business 2Gbps Pime promo @ RM369"}
                          value={"Unifi Business 2Gbps Pime promo @ RM369"}
                        />
                      </React.Fragment>
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4Uh9L
                        )}
                      >
                        {"Home Package :"}
                      </div>
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "combobox3",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateHomePackage"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["homePackage"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateHomePackage"] != null &&
                          typeof $steps["updateHomePackage"] === "object" &&
                          typeof $steps["updateHomePackage"].then === "function"
                        ) {
                          $steps["updateHomePackage"] = await $steps[
                            "updateHomePackage"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "combobox3",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"Select:"}
                    value={generateStateValueProp($state, [
                      "combobox3",
                      "value"
                    ])}
                  />

                  <TextInput
                    data-plasmic-name={"textInput5"}
                    data-plasmic-override={overrides.textInput5}
                    className={classNames("__wab_instance", sty.textInput5)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput5",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateIc"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["ic"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIc"] != null &&
                          typeof $steps["updateIc"] === "object" &&
                          typeof $steps["updateIc"].then === "function"
                        ) {
                          $steps["updateIc"] = await $steps["updateIc"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"NRIC/Passport NO\uff1a"}
                  />

                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateName"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["name"]
                                },
                                operation: 0,
                                value: $evnent.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateName"] != null &&
                          typeof $steps["updateName"] === "object" &&
                          typeof $steps["updateName"].then === "function"
                        ) {
                          $steps["updateName"] = await $steps["updateName"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"Full Name\uff1a"}
                  />

                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput2",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateEmail"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["email"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEmail"] != null &&
                          typeof $steps["updateEmail"] === "object" &&
                          typeof $steps["updateEmail"].then === "function"
                        ) {
                          $steps["updateEmail"] = await $steps["updateEmail"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"Email\uff1a"}
                  />

                  <TextInput
                    data-plasmic-name={"textInput3"}
                    data-plasmic-override={overrides.textInput3}
                    className={classNames("__wab_instance", sty.textInput3)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput3",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updatePhoneNumber"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["phoneNumber"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePhoneNumber"] != null &&
                          typeof $steps["updatePhoneNumber"] === "object" &&
                          typeof $steps["updatePhoneNumber"].then === "function"
                        ) {
                          $steps["updatePhoneNumber"] = await $steps[
                            "updatePhoneNumber"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"Mobile Number\uff08Malaysia\uff09:"}
                  />

                  <TextInput
                    data-plasmic-name={"textInput4"}
                    data-plasmic-override={overrides.textInput4}
                    className={classNames("__wab_instance", sty.textInput4)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput4",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateAddresss"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["address"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAddresss"] != null &&
                          typeof $steps["updateAddresss"] === "object" &&
                          typeof $steps["updateAddresss"].then === "function"
                        ) {
                          $steps["updateAddresss"] = await $steps[
                            "updateAddresss"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"Installation Address\uff1a"}
                  />

                  <TextInput
                    data-plasmic-name={"textInput6"}
                    data-plasmic-override={overrides.textInput6}
                    className={classNames("__wab_instance", sty.textInput6)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput6",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updatePostcode"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["postcode"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePostcode"] != null &&
                          typeof $steps["updatePostcode"] === "object" &&
                          typeof $steps["updatePostcode"].then === "function"
                        ) {
                          $steps["updatePostcode"] = await $steps[
                            "updatePostcode"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"Postcode\uff1a"}
                  />

                  <TextInput
                    data-plasmic-name={"textInput8"}
                    data-plasmic-override={overrides.textInput8}
                    className={classNames("__wab_instance", sty.textInput8)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput8",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateState"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["state"]
                                },
                                operation: 0,
                                value: $event.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateState"] != null &&
                          typeof $steps["updateState"] === "object" &&
                          typeof $steps["updateState"].then === "function"
                        ) {
                          $steps["updateState"] = await $steps["updateState"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"State\uff1aJohor"}
                  />

                  <Orange
                    className={classNames("__wab_instance", sty.orange__uxHI, {
                      [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__uxHIe9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fzpul,
                          {
                            [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__fzpule9Dzn]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants2",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Save"
                          : "Save"}
                      </div>
                    }
                    linkTo={(() => {
                      try {
                        return (
                          "https://wa.me/60107801215?text=Package:" +
                          $state._package +
                          "%0AHome Package:" +
                          $state.homePackage +
                          "%0AName:" +
                          $state.name +
                          "%0AEmail:" +
                          $state.email +
                          "%0APhone Number:" +
                          $state.phoneNumber +
                          "%0AAddress:" +
                          $state.address +
                          "%0APOst Code:" +
                          $state.postcode +
                          "%0AState:" +
                          $state.state
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (
                                  "https://wa.me/60107801215?text=Name:" +
                                  $state.name +
                                  "%0AEmail:" +
                                  $state.email +
                                  "%0APhone Number:" +
                                  $state.phoneNumber +
                                  "%0AAdress:" +
                                  $state.adress
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    openLinkInNewTab={true}
                  />
                </React.Fragment>
              }
            >
              <Orange
                className={classNames("__wab_instance", sty.orange__sdGxv)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gj9L7
                    )}
                  >
                    {"Save"}
                  </div>
                }
                size={"extraLarge"}
                submitsForm={true}
              />
            </SignUpPrompt>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7BG1M,
              {
                [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___7BG1ME9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              }
            )}
          >
            {"Not sure? You can WhatsApp us to ask any questions!"}
          </div>
          {(
            hasVariant(
              globalVariants,
              "unnamedGlobalGroupOfVariants2",
              "unnamedVariant"
            ) && hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : false
          ) ? (
            <Orange
              className={classNames("__wab_instance", sty.orange__rOymr, {
                [sty.orangeglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__rOymre9Dzn]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants2",
                    "unnamedVariant"
                  )
              })}
              label={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xhkwn
                    )}
                  >
                    {"Click here"}
                  </div>
                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg__slp4W, {
                      [sty.svgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__slp4WE9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    role={"img"}
                  />

                  <WhatsappIconLogoSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___5Lc1X, {
                      [sty.svgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant___5Lc1Xe9Dzn]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    })}
                    role={"img"}
                  />
                </React.Fragment>
              }
              linkTo={"https://wa.me/60107801215"}
              openLinkInNewTab={true}
            />
          ) : null}
          <div
            className={classNames(projectcss.all, sty.freeBox__kirHr, {
              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__kirHrE9Dzn]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__gOm2Y
              )}
            >
              {"FREQUENTLY ASK QUESTIONS"}
            </h1>
            <TextField
              data-plasmic-name={"textField"}
              data-plasmic-override={overrides.textField}
              className={classNames("__wab_instance", sty.textField)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["textField", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />

            <AntdAccordionItem
              className={classNames(
                "__wab_instance",
                sty.accordionItem__dXgx3,
                {
                  [sty.accordionItemglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__dXgx3E9Dzn]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants2",
                      "unnamedVariant"
                    )
                }
              )}
              headerClass={classNames({ [sty["pcls_9pm_9h-9B2s2"]]: true })}
              label2={"Collapse Header"}
              showArrow={true}
            >
              <div className={classNames(projectcss.all, sty.freeBox__utbtj)}>
                {renderPlasmicSlot({
                  defaultContents: (() => {
                    const child$Props = {
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.accordion__tO7CG
                      ),
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__d5BXb
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oLlX
                                )}
                              >
                                {"Can you tell me more about Unifi?"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__z7A57
                              )}
                            >
                              {
                                "Unifi provides access to a digital lifestyle for Malaysians through its converged offerings of reliable internet connectivity, content and devices for everyone in a household.  We offer seamless internet connectivity at home and beyond through our fibre, wireless, mobile, and solutions that help consumers stay connected at all times. "
                              }
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__iZcam
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__stTpg
                                )}
                              >
                                {
                                  "What are the benefits if I subscribe to Unifi Home?"
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aGm3A
                              )}
                            >
                              {
                                "Unifi will enhance your high speed Internet, mobile and entertainment experience by providing the fastest internet speed, greater variety of entertainment options for you and the whole family, affordable mobile packages with unlimited data and better service stability."
                              }
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      )
                    };

                    return <AntdAccordion {...child$Props} />;
                  })(),
                  value: args.accordion3
                })}
                {(() => {
                  const child$Props = {
                    activeKey: generateStateValueProp($state, [
                      "accordion2",
                      "activePanelId"
                    ]),
                    bordered: true,
                    className: classNames("__wab_instance", sty.accordion2, {
                      [sty.accordion2global_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants2",
                          "unnamedVariant"
                        )
                    }),
                    items: (
                      <React.Fragment>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__neDb5
                          )}
                          id={1}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nfED
                              )}
                            >
                              {
                                "Is there any penalty charge if i terminate my Unifi Home AFTER the minumum subscription period is over?"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j5RmJ
                            )}
                          >
                            {
                              "There will be no penalty charge for termination made after the minimum contract period (24 months)."
                            }
                          </div>
                        </AntdAccordionItem>
                        <AntdAccordionItem
                          className={classNames(
                            "__wab_instance",
                            sty.accordionItem__n9Ouj
                          )}
                          id={2}
                          label2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gd0CZ
                              )}
                            >
                              {
                                "You can check Unifi service availability in your are via the following method"
                              }
                            </div>
                          }
                          showArrow={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7LGf9
                            )}
                          >
                            {
                              "(a) Check via Unifi portal at Check Coverage (b) Check via our digital channels below: Live Chat via Live Chat or MyUnifi app Facebook at facebook.com/weareunifi Twitter at @helpmeunifi Email to help@tm.com.my"
                            }
                          </div>
                        </AntdAccordionItem>
                      </React.Fragment>
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion2", "activePanelId"],
                        AntdAccordion_Helpers
                      ).apply(null, eventArgs);
                    }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "activePanelId",
                        plasmicStateName: "accordion2.activePanelId"
                      }
                    ],
                    [],
                    AntdAccordion_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdAccordion
                      data-plasmic-name={"accordion2"}
                      data-plasmic-override={overrides.accordion2}
                      {...child$Props}
                    />
                  );
                })()}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                )
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion5",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion5),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem___8Pt2
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9MPg3
                                  )}
                                >
                                  {
                                    "Turbocharged Speeds and Superior Operational Efficiency with Premium Mesh Wi-Fi 7"
                                  }
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sLosu
                                )}
                              >
                                {"NgBOONKIAT"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__l4R7H
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ymDco
                                  )}
                                >
                                  {"ok"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gcuJ9
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion5", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion5.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion5"}
                          data-plasmic-override={overrides.accordion5}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                )
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion6",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion6),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__gMbS
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mpEM
                                  )}
                                >
                                  {
                                    "Turbocharged Speeds and Superior Operational Efficiency with Premium Mesh Wi-Fi 7"
                                  }
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__epQEe
                                )}
                              >
                                {"NgBOONKIAT"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__qztoO
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__scF4I
                                  )}
                                >
                                  {"ok"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bVSfL
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion6", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion6.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion6"}
                          data-plasmic-override={overrides.accordion6}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                )
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion7",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion7),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__neq4H
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___7EpPc
                                  )}
                                >
                                  {
                                    "Turbocharged Speeds and Superior Operational Efficiency with Premium Mesh Wi-Fi 7"
                                  }
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ysEuC
                                )}
                              >
                                {"NgBOONKIAT"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__g7JM
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3Mf0M
                                  )}
                                >
                                  {"ok"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qsD4D
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion7", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion7.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion7"}
                          data-plasmic-override={overrides.accordion7}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
              </div>
              <Orange
                className={classNames("__wab_instance", sty.orange__ybNcD)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uIkj5
                    )}
                  >
                    {"Text"}
                  </div>
                }
              />
            </AntdAccordionItem>
            <Select
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              ariaLabel={``}
              className={classNames("__wab_instance", sty.select)}
              isOpen={generateStateValueProp($state, ["select", "isOpen"])}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["select", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["select", "isOpen"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={``}
              showLabel={true}
              value={generateStateValueProp($state, ["select", "value"])}
            />
          </div>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__dRUqS, {
              [sty.imgglobal_unnamedGlobalGroupOfVariants2_unnamedVariant__dRUqSe9Dzn]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            })}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "119px"
                : "auto"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};

              $steps["goToNewPage"] = true
                ? (() => {
                    const actionArgs = { destination: `/new-page-4` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToNewPage"] != null &&
                typeof $steps["goToNewPage"] === "object" &&
                typeof $steps["goToNewPage"].then === "function"
              ) {
                $steps["goToNewPage"] = await $steps["goToNewPage"];
              }
            }}
            src={{
              src: "/plasmic/unifi/images/screenshot20250902091731Png.png",
              fullWidth: 1700,
              fullHeight: 443,
              aspectRatio: undefined
            }}
          />

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "button",
    "sliderCarousel",
    "\u7b2c\u4e00",
    "\u7b2c\u4e8c",
    "\u7b2c\u4e09",
    "\u7b2c\u56db",
    "\u7b2c\u4e94",
    "section",
    "foreground5",
    "h2",
    "headerHeroSection2",
    "columns",
    "column",
    "signUpPrompt",
    "combobox",
    "combobox3",
    "textInput5",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput6",
    "textInput8",
    "textField",
    "accordion2",
    "accordion5",
    "accordion6",
    "accordion7",
    "select",
    "footerSection"
  ],
  navbar: ["navbar"],
  button: ["button"],
  sliderCarousel: [
    "sliderCarousel",
    "\u7b2c\u4e00",
    "\u7b2c\u4e8c",
    "\u7b2c\u4e09",
    "\u7b2c\u56db",
    "\u7b2c\u4e94"
  ],
  第一: ["\u7b2c\u4e00"],
  第二: ["\u7b2c\u4e8c"],
  第三: ["\u7b2c\u4e09"],
  第四: ["\u7b2c\u56db"],
  第五: ["\u7b2c\u4e94"],
  section: ["section", "foreground5", "h2"],
  foreground5: ["foreground5", "h2"],
  h2: ["h2"],
  headerHeroSection2: [
    "headerHeroSection2",
    "columns",
    "column",
    "signUpPrompt",
    "combobox",
    "combobox3",
    "textInput5",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput6",
    "textInput8"
  ],
  columns: ["columns", "column"],
  column: ["column"],
  signUpPrompt: [
    "signUpPrompt",
    "combobox",
    "combobox3",
    "textInput5",
    "textInput",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput6",
    "textInput8"
  ],
  combobox: ["combobox"],
  combobox3: ["combobox3"],
  textInput5: ["textInput5"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  textInput6: ["textInput6"],
  textInput8: ["textInput8"],
  textField: ["textField"],
  accordion2: ["accordion2"],
  accordion5: ["accordion5"],
  accordion6: ["accordion6"],
  accordion7: ["accordion7"],
  select: ["select"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  button: typeof AntdButton;
  sliderCarousel: typeof SliderWrapper;
  第一: "div";
  第二: "div";
  第三: "div";
  第四: "div";
  第五: "div";
  section: "section";
  foreground5: "div";
  h2: "h2";
  headerHeroSection2: "div";
  columns: "div";
  column: "div";
  signUpPrompt: typeof SignUpPrompt;
  combobox: typeof Combobox;
  combobox3: typeof Combobox;
  textInput5: typeof TextInput;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  textInput6: typeof TextInput;
  textInput8: typeof TextInput;
  textField: typeof TextField;
  accordion2: typeof AntdAccordion;
  accordion5: typeof AntdAccordion;
  accordion6: typeof AntdAccordion;
  accordion7: typeof AntdAccordion;
  select: typeof Select;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBusiness__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBusiness__VariantsArgs;
    args?: PlasmicBusiness__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBusiness__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBusiness__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBusiness__ArgProps,
          internalVariantPropNames: PlasmicBusiness__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBusiness__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBusiness";
  } else {
    func.displayName = `PlasmicBusiness.${nodeName}`;
  }
  return func;
}

export const PlasmicBusiness = Object.assign(
  // Top-level PlasmicBusiness renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    button: makeNodeComponent("button"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    第一: makeNodeComponent("\u7b2c\u4e00"),
    第二: makeNodeComponent("\u7b2c\u4e8c"),
    第三: makeNodeComponent("\u7b2c\u4e09"),
    第四: makeNodeComponent("\u7b2c\u56db"),
    第五: makeNodeComponent("\u7b2c\u4e94"),
    section: makeNodeComponent("section"),
    foreground5: makeNodeComponent("foreground5"),
    h2: makeNodeComponent("h2"),
    headerHeroSection2: makeNodeComponent("headerHeroSection2"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    signUpPrompt: makeNodeComponent("signUpPrompt"),
    combobox: makeNodeComponent("combobox"),
    combobox3: makeNodeComponent("combobox3"),
    textInput5: makeNodeComponent("textInput5"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    textInput6: makeNodeComponent("textInput6"),
    textInput8: makeNodeComponent("textInput8"),
    textField: makeNodeComponent("textField"),
    accordion2: makeNodeComponent("accordion2"),
    accordion5: makeNodeComponent("accordion5"),
    accordion6: makeNodeComponent("accordion6"),
    accordion7: makeNodeComponent("accordion7"),
    select: makeNodeComponent("select"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicBusiness
    internalVariantProps: PlasmicBusiness__VariantProps,
    internalArgProps: PlasmicBusiness__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBusiness;
/* prettier-ignore-end */
