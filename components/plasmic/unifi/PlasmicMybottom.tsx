/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vEU7LntD2rfdBHtDX5FyyK
// Component: tfiywmxbHZxm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Orange from "../../Orange"; // plasmic-import: 065BO1JJJI1f/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: vEU7LntD2rfdBHtDX5FyyK/projectcss
import sty from "./PlasmicMybottom.module.css"; // plasmic-import: tfiywmxbHZxm/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: RV9gb3oAKBcE/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: ft0TW_03C8R0/icon

createPlasmicElementProxy;

export type PlasmicMybottom__VariantMembers = {};
export type PlasmicMybottom__VariantsArgs = {};
type VariantPropType = keyof PlasmicMybottom__VariantsArgs;
export const PlasmicMybottom__VariantProps = new Array<VariantPropType>();

export type PlasmicMybottom__ArgsType = {};
type ArgPropType = keyof PlasmicMybottom__ArgsType;
export const PlasmicMybottom__ArgProps = new Array<ArgPropType>();

export type PlasmicMybottom__OverridesType = {
  root?: Flex__<typeof Orange>;
  text?: Flex__<"div">;
};

export interface DefaultMybottomProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMybottom__RenderFunc(props: {
  variants: PlasmicMybottom__VariantsArgs;
  args: PlasmicMybottom__ArgsType;
  overrides: PlasmicMybottom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <Orange
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root, {
        [sty.rootglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
          hasVariant(
            globalVariants,
            "unnamedGlobalGroupOfVariants2",
            "unnamedVariant"
          )
      })}
      label={
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textglobal_unnamedGlobalGroupOfVariants2_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants2",
                  "unnamedVariant"
                )
            }
          )}
        >
          {"Next"}
        </div>
      }
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Orange;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMybottom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMybottom__VariantsArgs;
    args?: PlasmicMybottom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMybottom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMybottom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMybottom__ArgProps,
          internalVariantPropNames: PlasmicMybottom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMybottom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMybottom";
  } else {
    func.displayName = `PlasmicMybottom.${nodeName}`;
  }
  return func;
}

export const PlasmicMybottom = Object.assign(
  // Top-level PlasmicMybottom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicMybottom
    internalVariantProps: PlasmicMybottom__VariantProps,
    internalArgProps: PlasmicMybottom__ArgProps
  }
);

export default PlasmicMybottom;
/* prettier-ignore-end */
